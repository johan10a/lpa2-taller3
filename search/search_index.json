{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udfb5 API Musical \ud83d\udc64 Johan Alexis Chara Ferrerosa \ud83d\udcd8 Materia: Lenguaje de Programaci\u00f3n Avanzado 2 \ud83c\udfeb Universidad: Uniremington \ud83d\udcc5 A\u00f1o: 2025 \ud83c\udfaf Bienvenido a la documentaci\u00f3n oficial del proyecto API Musical , desarrollado como parte del curso de Lenguaje de Programaci\u00f3n Avanzado 2 . Este sistema tiene como objetivo ofrecer una API RESTful moderna para la gesti\u00f3n de m\u00fasica, incluyendo: \ud83d\udc65 Gesti\u00f3n de usuarios \ud83c\udfb6 Administraci\u00f3n de canciones \u2b50 Favoritos personalizados \ud83d\udee0\ufe0f Utilidades y configuraci\u00f3n \ud83d\udcda Documentaci\u00f3n generada autom\u00e1ticamente \ud83d\udd0d Explora el men\u00fa lateral para conocer en detalle: \ud83d\udcc1 Recursos \ud83e\uddf1 Modelos \ud83e\udde9 Extensiones \u2699\ufe0f Configuraci\u00f3n \ud83d\udce4 Modelos de API \ud83e\uddf0 Utilidades \ud83d\ude80 Aplicaci\u00f3n Principal \ud83e\uddd1\u200d\ud83d\udcbb Proyecto acad\u00e9mico con fines formativos \ud83d\uddd3\ufe0f Desarrollado en 2025 por Johan Alexis Chara Ferrerosa \ud83d\udcec \u00bfComentarios o sugerencias? \u00a1Bienvenidos! \u2709\ufe0f","title":"Inicio"},{"location":"#api-musical","text":"","title":"\ud83c\udfb5 API Musical"},{"location":"#johan-alexis-chara-ferrerosa","text":"\ud83d\udcd8 Materia: Lenguaje de Programaci\u00f3n Avanzado 2 \ud83c\udfeb Universidad: Uniremington \ud83d\udcc5 A\u00f1o: 2025 \ud83c\udfaf Bienvenido a la documentaci\u00f3n oficial del proyecto API Musical , desarrollado como parte del curso de Lenguaje de Programaci\u00f3n Avanzado 2 . Este sistema tiene como objetivo ofrecer una API RESTful moderna para la gesti\u00f3n de m\u00fasica, incluyendo: \ud83d\udc65 Gesti\u00f3n de usuarios \ud83c\udfb6 Administraci\u00f3n de canciones \u2b50 Favoritos personalizados \ud83d\udee0\ufe0f Utilidades y configuraci\u00f3n \ud83d\udcda Documentaci\u00f3n generada autom\u00e1ticamente \ud83d\udd0d Explora el men\u00fa lateral para conocer en detalle: \ud83d\udcc1 Recursos \ud83e\uddf1 Modelos \ud83e\udde9 Extensiones \u2699\ufe0f Configuraci\u00f3n \ud83d\udce4 Modelos de API \ud83e\uddf0 Utilidades \ud83d\ude80 Aplicaci\u00f3n Principal \ud83e\uddd1\u200d\ud83d\udcbb Proyecto acad\u00e9mico con fines formativos \ud83d\uddd3\ufe0f Desarrollado en 2025 por Johan Alexis Chara Ferrerosa \ud83d\udcec \u00bfComentarios o sugerencias? \u00a1Bienvenidos! \u2709\ufe0f","title":"\ud83d\udc64 Johan Alexis Chara Ferrerosa"},{"location":"api_models/","text":"M\u00f3dulo de modelos de API para la serializaci\u00f3n/deserializaci\u00f3n de datos. M\u00f3dulo de modelos de API para la serializaci\u00f3n/deserializaci\u00f3n de datos. Define los esquemas utilizados por Flask-RESTX para la documentaci\u00f3n y validaci\u00f3n de los recursos de la API: Usuarios, Canciones y Favoritos. cancion_base = api.model('CancionBase', {'titulo': fields.String(required=True, description='T\u00edtulo de la canci\u00f3n'), 'artista': fields.String(required=True, description='Artista/int\u00e9rprete de la canci\u00f3n'), 'album': fields.String(description='\u00c1lbum al que pertenece la canci\u00f3n'), 'duracion': fields.Integer(description='Duraci\u00f3n en segundos'), 'a\u00f1o': fields.Integer(description='A\u00f1o de lanzamiento'), 'genero': fields.String(description='G\u00e9nero musical')}) module-attribute Modelo base para Canci\u00f3n. Campos obligatorios: - titulo (str): T\u00edtulo de la canci\u00f3n. - artista (str): Artista o int\u00e9rprete. Campos opcionales: - album (str): \u00c1lbum al que pertenece. - duracion (int): Duraci\u00f3n en segundos. - a\u00f1o (int): A\u00f1o de lanzamiento. - genero (str): G\u00e9nero musical. cancion_model = api.inherit('Cancion', cancion_base, {'id': fields.Integer(description='Identificador \u00fanico de la canci\u00f3n'), 'fecha_creacion': fields.DateTime(description='Fecha de creaci\u00f3n del registro')}) module-attribute Modelo completo de Canci\u00f3n, heredando de CancionBase. Campos adicionales: - id (int): Identificador \u00fanico. - fecha_creacion (datetime): Fecha de creaci\u00f3n del registro. cancion_simple = api.model('CancionSimple', {'id': fields.Integer(description='ID de la canci\u00f3n'), 'titulo': fields.String(description='T\u00edtulo de la canci\u00f3n'), 'artista': fields.String(description='Artista de la canci\u00f3n')}) module-attribute Modelo simple para representar una Canci\u00f3n con campos b\u00e1sicos. favorito_input = api.model('FavoritoInput', {'id_usuario': fields.Integer(required=True, description='ID del usuario'), 'id_cancion': fields.Integer(required=True, description='ID de la canci\u00f3n')}) module-attribute Modelo para entrada de Favorito. Campos obligatorios: - id_usuario (int): ID del usuario. - id_cancion (int): ID de la canci\u00f3n. favorito_model = api.model('Favorito', {'id': fields.Integer(description='ID del favorito'), 'id_usuario': fields.Integer(description='ID del usuario'), 'id_cancion': fields.Integer(description='ID de la canci\u00f3n'), 'fecha_marcado': fields.DateTime(description='Fecha en que se marc\u00f3 como favorito'), 'usuario': fields.Nested(usuario_simple, description='Datos del usuario'), 'cancion': fields.Nested(cancion_simple, description='Datos de la canci\u00f3n')}) module-attribute Modelo completo para representar un Favorito. Incluye: - informaci\u00f3n b\u00e1sica del favorito, - datos anidados del usuario y la canci\u00f3n relacionados. favoritos_usuario_model = api.model('FavoritosUsuario', {'usuario': fields.Nested(usuario_simple), 'canciones_favoritas': fields.List(fields.Nested(cancion_simple))}) module-attribute Modelo para mostrar canciones favoritas de un usuario. Campos: - usuario (UsuarioSimple): Datos b\u00e1sicos del usuario. - canciones_favoritas (list): Lista de canciones favoritas (CancionSimple). mensaje_model = api.model('Mensaje', {'mensaje': fields.String(description='Mensaje informativo')}) module-attribute Modelo para respuestas simples con un mensaje informativo. Campos: - mensaje (str): Mensaje informativo. usuario_base = api.model('UsuarioBase', {'nombre': fields.String(required=True, description='Nombre del usuario'), 'correo': fields.String(required=True, description='Correo electr\u00f3nico del usuario')}) module-attribute Modelo base para Usuario. Campos obligatorios: - nombre (str): Nombre del usuario. - correo (str): Correo electr\u00f3nico del usuario. usuario_model = api.inherit('Usuario', usuario_base, {'id': fields.Integer(description='Identificador \u00fanico del usuario'), 'fecha_registro': fields.DateTime(description='Fecha de registro del usuario')}) module-attribute Modelo completo de Usuario, heredando de UsuarioBase. Campos adicionales: - id (int): Identificador \u00fanico del usuario. - fecha_registro (datetime): Fecha de registro. usuario_simple = api.model('UsuarioSimple', {'id': fields.Integer(description='ID del usuario'), 'nombre': fields.String(description='Nombre del usuario')}) module-attribute Modelo simple para representar un Usuario con campos b\u00e1sicos.","title":"Modelos de API"},{"location":"api_models/#modulo-de-modelos-de-api-para-la-serializaciondeserializacion-de-datos","text":"M\u00f3dulo de modelos de API para la serializaci\u00f3n/deserializaci\u00f3n de datos. Define los esquemas utilizados por Flask-RESTX para la documentaci\u00f3n y validaci\u00f3n de los recursos de la API: Usuarios, Canciones y Favoritos.","title":"M\u00f3dulo de modelos de API para la serializaci\u00f3n/deserializaci\u00f3n de datos."},{"location":"api_models/#musica_api.api_models.cancion_base","text":"Modelo base para Canci\u00f3n. Campos obligatorios: - titulo (str): T\u00edtulo de la canci\u00f3n. - artista (str): Artista o int\u00e9rprete. Campos opcionales: - album (str): \u00c1lbum al que pertenece. - duracion (int): Duraci\u00f3n en segundos. - a\u00f1o (int): A\u00f1o de lanzamiento. - genero (str): G\u00e9nero musical.","title":"cancion_base"},{"location":"api_models/#musica_api.api_models.cancion_model","text":"Modelo completo de Canci\u00f3n, heredando de CancionBase. Campos adicionales: - id (int): Identificador \u00fanico. - fecha_creacion (datetime): Fecha de creaci\u00f3n del registro.","title":"cancion_model"},{"location":"api_models/#musica_api.api_models.cancion_simple","text":"Modelo simple para representar una Canci\u00f3n con campos b\u00e1sicos.","title":"cancion_simple"},{"location":"api_models/#musica_api.api_models.favorito_input","text":"Modelo para entrada de Favorito. Campos obligatorios: - id_usuario (int): ID del usuario. - id_cancion (int): ID de la canci\u00f3n.","title":"favorito_input"},{"location":"api_models/#musica_api.api_models.favorito_model","text":"Modelo completo para representar un Favorito. Incluye: - informaci\u00f3n b\u00e1sica del favorito, - datos anidados del usuario y la canci\u00f3n relacionados.","title":"favorito_model"},{"location":"api_models/#musica_api.api_models.favoritos_usuario_model","text":"Modelo para mostrar canciones favoritas de un usuario. Campos: - usuario (UsuarioSimple): Datos b\u00e1sicos del usuario. - canciones_favoritas (list): Lista de canciones favoritas (CancionSimple).","title":"favoritos_usuario_model"},{"location":"api_models/#musica_api.api_models.mensaje_model","text":"Modelo para respuestas simples con un mensaje informativo. Campos: - mensaje (str): Mensaje informativo.","title":"mensaje_model"},{"location":"api_models/#musica_api.api_models.usuario_base","text":"Modelo base para Usuario. Campos obligatorios: - nombre (str): Nombre del usuario. - correo (str): Correo electr\u00f3nico del usuario.","title":"usuario_base"},{"location":"api_models/#musica_api.api_models.usuario_model","text":"Modelo completo de Usuario, heredando de UsuarioBase. Campos adicionales: - id (int): Identificador \u00fanico del usuario. - fecha_registro (datetime): Fecha de registro.","title":"usuario_model"},{"location":"api_models/#musica_api.api_models.usuario_simple","text":"Modelo simple para representar un Usuario con campos b\u00e1sicos.","title":"usuario_simple"},{"location":"app/","text":"Script principal para ejecutar la aplicaci\u00f3n Flask. Script principal para ejecutar la aplicaci\u00f3n Flask. Este m\u00f3dulo carga las variables de entorno, crea la aplicaci\u00f3n utilizando la funci\u00f3n create_app() e inicia el servidor Flask. debug = os.getenv('FLASK_DEBUG', 'False').lower() == 'true' module-attribute Ejecutar la aplicaci\u00f3n Flask. port = int(os.getenv('PORT', 5000)) module-attribute Determinar si se debe usar el modo debug.","title":"Aplicaci\u00f3n Principal"},{"location":"app/#script-principal-para-ejecutar-la-aplicacion-flask","text":"Script principal para ejecutar la aplicaci\u00f3n Flask. Este m\u00f3dulo carga las variables de entorno, crea la aplicaci\u00f3n utilizando la funci\u00f3n create_app() e inicia el servidor Flask.","title":"Script principal para ejecutar la aplicaci\u00f3n Flask."},{"location":"app/#app.debug","text":"Ejecutar la aplicaci\u00f3n Flask.","title":"debug"},{"location":"app/#app.port","text":"Determinar si se debe usar el modo debug.","title":"port"},{"location":"config/","text":"M\u00f3dulo de configuraci\u00f3n de la aplicaci\u00f3n. M\u00f3dulo de configuraci\u00f3n de la aplicaci\u00f3n. Define las diferentes configuraciones para entornos de desarrollo, pruebas y producci\u00f3n. Config Configuraci\u00f3n base para la aplicaci\u00f3n. Source code in musica_api\\config.py class Config: \"\"\"Configuraci\u00f3n base para la aplicaci\u00f3n.\"\"\" # Configuraci\u00f3n de la base de datos # Corregido: se a\u00f1ade sqlite' SQLALCHEMY_DATABASE_URI = os.getenv( \"SQLALCHEMY_DATABASE_URI\", \"sqlite:///Users/Admin/Public/musica.db\" ) SQLALCHEMY_TRACK_MODIFICATIONS = ( os.getenv(\"SQLALCHEMY_TRACK_MODIFICATIONS\", \"False\").lower() == \"true\" ) # Configuraci\u00f3n de la API API_TITLE = os.getenv(\"API_TITLE\", \"API de M\u00fasica\") API_VERSION = os.getenv(\"API_VERSION\", \"1.0\") # Otras configuraciones generales SECRET_KEY = os.getenv(\"SECRET_KEY\", \"clave-secreta-predeterminada\") DevelopmentConfig Bases: Config Configuraci\u00f3n para entorno de desarrollo. Source code in musica_api\\config.py class DevelopmentConfig(Config): \"\"\"Configuraci\u00f3n para entorno de desarrollo.\"\"\" DEBUG = True ProductionConfig Bases: Config Configuraci\u00f3n para entorno de producci\u00f3n. Source code in musica_api\\config.py class ProductionConfig(Config): \"\"\"Configuraci\u00f3n para entorno de producci\u00f3n.\"\"\" DEBUG = False # En producci\u00f3n, asegurarse de tener una clave secreta fuerte SECRET_KEY = os.getenv(\"SECRET_KEY\") TestingConfig Bases: Config Configuraci\u00f3n para entorno de pruebas. Source code in musica_api\\config.py class TestingConfig(Config): \"\"\"Configuraci\u00f3n para entorno de pruebas.\"\"\" TESTING = True SQLALCHEMY_DATABASE_URI = \"sqlite:///musica_test.db\" get_config(env=None) Obtiene la configuraci\u00f3n seg\u00fan el entorno especificado en las variables de entorno o directamente por par\u00e1metro. Parameters: Name Type Description Default env str Nombre del entorno. Si es None, se usa FLASK_ENV. None Returns: Name Type Description object Clase de configuraci\u00f3n seg\u00fan el entorno. Source code in musica_api\\config.py def get_config(env=None): \"\"\" Obtiene la configuraci\u00f3n seg\u00fan el entorno especificado en las variables de entorno o directamente por par\u00e1metro. Args: env (str, optional): Nombre del entorno. Si es None, se usa FLASK_ENV. Returns: object: Clase de configuraci\u00f3n seg\u00fan el entorno. \"\"\" if env is None: env = os.getenv(\"FLASK_ENV\", \"development\") return config_by_name.get(env, config_by_name[\"default\"])","title":"Configuraci\u00f3n"},{"location":"config/#modulo-de-configuracion-de-la-aplicacion","text":"M\u00f3dulo de configuraci\u00f3n de la aplicaci\u00f3n. Define las diferentes configuraciones para entornos de desarrollo, pruebas y producci\u00f3n.","title":"M\u00f3dulo de configuraci\u00f3n de la aplicaci\u00f3n."},{"location":"config/#musica_api.config.Config","text":"Configuraci\u00f3n base para la aplicaci\u00f3n. Source code in musica_api\\config.py class Config: \"\"\"Configuraci\u00f3n base para la aplicaci\u00f3n.\"\"\" # Configuraci\u00f3n de la base de datos # Corregido: se a\u00f1ade sqlite' SQLALCHEMY_DATABASE_URI = os.getenv( \"SQLALCHEMY_DATABASE_URI\", \"sqlite:///Users/Admin/Public/musica.db\" ) SQLALCHEMY_TRACK_MODIFICATIONS = ( os.getenv(\"SQLALCHEMY_TRACK_MODIFICATIONS\", \"False\").lower() == \"true\" ) # Configuraci\u00f3n de la API API_TITLE = os.getenv(\"API_TITLE\", \"API de M\u00fasica\") API_VERSION = os.getenv(\"API_VERSION\", \"1.0\") # Otras configuraciones generales SECRET_KEY = os.getenv(\"SECRET_KEY\", \"clave-secreta-predeterminada\")","title":"Config"},{"location":"config/#musica_api.config.DevelopmentConfig","text":"Bases: Config Configuraci\u00f3n para entorno de desarrollo. Source code in musica_api\\config.py class DevelopmentConfig(Config): \"\"\"Configuraci\u00f3n para entorno de desarrollo.\"\"\" DEBUG = True","title":"DevelopmentConfig"},{"location":"config/#musica_api.config.ProductionConfig","text":"Bases: Config Configuraci\u00f3n para entorno de producci\u00f3n. Source code in musica_api\\config.py class ProductionConfig(Config): \"\"\"Configuraci\u00f3n para entorno de producci\u00f3n.\"\"\" DEBUG = False # En producci\u00f3n, asegurarse de tener una clave secreta fuerte SECRET_KEY = os.getenv(\"SECRET_KEY\")","title":"ProductionConfig"},{"location":"config/#musica_api.config.TestingConfig","text":"Bases: Config Configuraci\u00f3n para entorno de pruebas. Source code in musica_api\\config.py class TestingConfig(Config): \"\"\"Configuraci\u00f3n para entorno de pruebas.\"\"\" TESTING = True SQLALCHEMY_DATABASE_URI = \"sqlite:///musica_test.db\"","title":"TestingConfig"},{"location":"config/#musica_api.config.get_config","text":"Obtiene la configuraci\u00f3n seg\u00fan el entorno especificado en las variables de entorno o directamente por par\u00e1metro. Parameters: Name Type Description Default env str Nombre del entorno. Si es None, se usa FLASK_ENV. None Returns: Name Type Description object Clase de configuraci\u00f3n seg\u00fan el entorno. Source code in musica_api\\config.py def get_config(env=None): \"\"\" Obtiene la configuraci\u00f3n seg\u00fan el entorno especificado en las variables de entorno o directamente por par\u00e1metro. Args: env (str, optional): Nombre del entorno. Si es None, se usa FLASK_ENV. Returns: object: Clase de configuraci\u00f3n seg\u00fan el entorno. \"\"\" if env is None: env = os.getenv(\"FLASK_ENV\", \"development\") return config_by_name.get(env, config_by_name[\"default\"])","title":"get_config"},{"location":"extensions/","text":"M\u00f3dulo extensiones para la aplicaci\u00f3n Flask. M\u00f3dulo de extensiones para la aplicaci\u00f3n Flask. Este m\u00f3dulo define e inicializa las extensiones que ser\u00e1n utilizadas a lo largo del proyecto, tales como la API RESTful y el ORM para la base de datos. api = Api(title='API de M\u00fasica', version='1.0', description='API para gestionar Usuarios, Canciones y Favoritos', doc='/docs') module-attribute Instancia de Api para construir la API RESTful. Configura: - T\u00edtulo de la API - Versi\u00f3n - Descripci\u00f3n - Ruta de la documentaci\u00f3n Swagger UI (/docs) db = SQLAlchemy() module-attribute Instancia de SQLAlchemy para manejo ORM de la base de datos. Actualmente no est\u00e1 inicializada con la aplicaci\u00f3n Flask. Se requiere configuraci\u00f3n adicional para vincularla.","title":"Extensiones"},{"location":"extensions/#modulo-extensiones-para-la-aplicacion-flask","text":"M\u00f3dulo de extensiones para la aplicaci\u00f3n Flask. Este m\u00f3dulo define e inicializa las extensiones que ser\u00e1n utilizadas a lo largo del proyecto, tales como la API RESTful y el ORM para la base de datos.","title":"M\u00f3dulo extensiones para la aplicaci\u00f3n Flask."},{"location":"extensions/#musica_api.extensions.api","text":"Instancia de Api para construir la API RESTful. Configura: - T\u00edtulo de la API - Versi\u00f3n - Descripci\u00f3n - Ruta de la documentaci\u00f3n Swagger UI (/docs)","title":"api"},{"location":"extensions/#musica_api.extensions.db","text":"Instancia de SQLAlchemy para manejo ORM de la base de datos. Actualmente no est\u00e1 inicializada con la aplicaci\u00f3n Flask. Se requiere configuraci\u00f3n adicional para vincularla.","title":"db"},{"location":"models/","text":"M\u00f3dulo de modelos de datos M\u00f3dulo de recursos de la API. Define los endpoints, controladores y la l\u00f3gica de negocio de la API. CancionAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico de la canci\u00f3n\") @ns.response(404, \"Canci\u00f3n no encontrada\") class CancionAPI(Resource): @ns.doc(\"Obtener una canci\u00f3n por su ID\") @ns.marshal_with(cancion_model) def get(self, id): \"\"\"Obtiene una canci\u00f3n por su ID\"\"\" return Cancion.query.get_or_404(id), 200 @ns.doc(\"Actualizar una canci\u00f3n\") @ns.expect(cancion_base) @ns.marshal_with(cancion_model) def put(self, id): \"\"\"Actualiza una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) data = request.json cancion.titulo = data.get(\"titulo\", cancion.titulo) cancion.artista = data.get(\"artista\", cancion.artista) cancion.album = data.get(\"album\", cancion.album) cancion.duracion = data.get(\"duracion\", cancion.duracion) cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o) cancion.genero = data.get(\"genero\", cancion.genero) try: db.session.commit() return cancion except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\") @ns.doc(\"Eliminar una canci\u00f3n\") @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\") def delete(self, id): \"\"\"Elimina una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) try: db.session.delete(cancion) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\") delete(id) Elimina una canci\u00f3n existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar una canci\u00f3n\") @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\") def delete(self, id): \"\"\"Elimina una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) try: db.session.delete(cancion) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\") get(id) Obtiene una canci\u00f3n por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener una canci\u00f3n por su ID\") @ns.marshal_with(cancion_model) def get(self, id): \"\"\"Obtiene una canci\u00f3n por su ID\"\"\" return Cancion.query.get_or_404(id), 200 put(id) Actualiza una canci\u00f3n existente Source code in musica_api\\resources.py @ns.doc(\"Actualizar una canci\u00f3n\") @ns.expect(cancion_base) @ns.marshal_with(cancion_model) def put(self, id): \"\"\"Actualiza una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) data = request.json cancion.titulo = data.get(\"titulo\", cancion.titulo) cancion.artista = data.get(\"artista\", cancion.artista) cancion.album = data.get(\"album\", cancion.album) cancion.duracion = data.get(\"duracion\", cancion.duracion) cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o) cancion.genero = data.get(\"genero\", cancion.genero) try: db.session.commit() return cancion except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\") CancionBusquedaAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones/buscar\") class CancionBusquedaAPI(Resource): @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\") @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\") @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\") @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\" titulo = request.args.get(\"titulo\") artista = request.args.get(\"artista\") genero = request.args.get(\"genero\") query = Cancion.query if titulo: query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\")) if artista: query = query.filter(Cancion.artista.ilike(f\"%{artista}%\")) if genero: query = query.filter(Cancion.genero == genero) return query.all(), 200 get() Busca canciones por t\u00edtulo, artista o g\u00e9nero Source code in musica_api\\resources.py @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\") @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\") @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\") @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\" titulo = request.args.get(\"titulo\") artista = request.args.get(\"artista\") genero = request.args.get(\"genero\") query = Cancion.query if titulo: query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\")) if artista: query = query.filter(Cancion.artista.ilike(f\"%{artista}%\")) if genero: query = query.filter(Cancion.genero == genero) return query.all(), 200 CancionListAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones\") class CancionListAPI(Resource): @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) canciones = Cancion.query.paginate( page=page, per_page=per_page, error_out=False ) return canciones.items, 200 @ns.doc(\"Crear una nueva canci\u00f3n\") @ns.expect(cancion_base) @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\") @ns.marshal_with(cancion_model) def post(self): \"\"\"Crea una nueva canci\u00f3n\"\"\" data = request.json cancion = Cancion( titulo=data[\"titulo\"], artista=data[\"artista\"], album=data.get(\"album\"), duracion=data.get(\"duracion\"), a\u00f1o=data.get(\"a\u00f1o\"), genero=data.get(\"genero\"), ) try: db.session.add(cancion) db.session.commit() return cancion, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\") get() Obtiene todas las canciones registradas (paginadas) Source code in musica_api\\resources.py @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) canciones = Cancion.query.paginate( page=page, per_page=per_page, error_out=False ) return canciones.items, 200 post() Crea una nueva canci\u00f3n Source code in musica_api\\resources.py @ns.doc(\"Crear una nueva canci\u00f3n\") @ns.expect(cancion_base) @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\") @ns.marshal_with(cancion_model) def post(self): \"\"\"Crea una nueva canci\u00f3n\"\"\" data = request.json cancion = Cancion( titulo=data[\"titulo\"], artista=data[\"artista\"], album=data.get(\"album\"), duracion=data.get(\"duracion\"), a\u00f1o=data.get(\"a\u00f1o\"), genero=data.get(\"genero\"), ) try: db.session.add(cancion) db.session.commit() return cancion, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\") FavoritoAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/favoritos/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico del favorito\") @ns.response(404, \"Favorito no encontrado\") class FavoritoAPI(Resource): @ns.doc(\"Obtener un favorito por su ID\") @ns.marshal_with(favorito_model) def get(self, id): \"\"\"Obtiene un registro de favorito por su ID\"\"\" return Favorito.query.get_or_404(id), 200 @ns.doc(\"Eliminar un favorito\") @ns.response(204, \"Favorito eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un registro de favorito existente\"\"\" favorito = Favorito.query.get_or_404(id) try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\") delete(id) Elimina un registro de favorito existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar un favorito\") @ns.response(204, \"Favorito eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un registro de favorito existente\"\"\" favorito = Favorito.query.get_or_404(id) try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\") get(id) Obtiene un registro de favorito por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener un favorito por su ID\") @ns.marshal_with(favorito_model) def get(self, id): \"\"\"Obtiene un registro de favorito por su ID\"\"\" return Favorito.query.get_or_404(id), 200 Home Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/\") class Home(Resource): @ns.doc(\"P\u00e1gina principal de la API\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\" return { \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\" }, 200 get() Mensaje de bienvenida en la ra\u00edz de la API Source code in musica_api\\resources.py @ns.doc(\"P\u00e1gina principal de la API\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\" return { \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\" }, 200 Ping Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/ping\") class Ping(Resource): @ns.response(200, \"API funcionando correctamente\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\" return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200 get() Endpoint para verificar que la API est\u00e1 funcionando Source code in musica_api\\resources.py @ns.response(200, \"API funcionando correctamente\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\" return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200 UsuarioAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico del usuario\") @ns.response(404, \"Usuario no encontrado\") class UsuarioAPI(Resource): @ns.doc(\"Obtener un usuario por su ID\") @ns.marshal_with(usuario_model) def get(self, id): \"\"\"Obtiene un usuario por su ID\"\"\" return Usuario.query.get_or_404(id), 200 @ns.doc(\"Actualizar un usuario\") @ns.expect(usuario_base) @ns.marshal_with(usuario_model) def put(self, id): \"\"\"Actualiza un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) data = request.json if \"correo\" in data and data[\"correo\"] != usuario.correo: if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario.nombre = data.get(\"nombre\", usuario.nombre) usuario.correo = data.get(\"correo\", usuario.correo) try: db.session.commit() return usuario except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar usuario: {str(e)}\") @ns.doc(\"Eliminar un usuario\") @ns.response(204, \"Usuario eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) try: db.session.delete(usuario) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar usuario: {str(e)}\") delete(id) Elimina un usuario existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar un usuario\") @ns.response(204, \"Usuario eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) try: db.session.delete(usuario) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar usuario: {str(e)}\") get(id) Obtiene un usuario por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener un usuario por su ID\") @ns.marshal_with(usuario_model) def get(self, id): \"\"\"Obtiene un usuario por su ID\"\"\" return Usuario.query.get_or_404(id), 200 put(id) Actualiza un usuario existente Source code in musica_api\\resources.py @ns.doc(\"Actualizar un usuario\") @ns.expect(usuario_base) @ns.marshal_with(usuario_model) def put(self, id): \"\"\"Actualiza un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) data = request.json if \"correo\" in data and data[\"correo\"] != usuario.correo: if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario.nombre = data.get(\"nombre\", usuario.nombre) usuario.correo = data.get(\"correo\", usuario.correo) try: db.session.commit() return usuario except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar usuario: {str(e)}\") UsuarioCancionFavoritoAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id_usuario>/favoritos/<int:id_cancion>\") @ns.param(\"id_usuario\", \"Identificador \u00fanico del usuario\") @ns.param(\"id_cancion\", \"Identificador \u00fanico de la canci\u00f3n\") class UsuarioCancionFavoritoAPI(Resource): @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\") @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(204, \"Canci\u00f3n desmarcada como favorita\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") def post(self, id_usuario, id_cancion): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" usuario = Usuario.query.get(id_usuario) cancion = Cancion.query.get(id_cancion) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first() if favorito: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion) try: db.session.add(favorito) db.session.commit() return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") @ns.doc(\"Eliminar una canci\u00f3n de favoritos\") @ns.response(204, \"Canci\u00f3n eliminada de favoritos\") @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\") def delete(self, id_usuario, id_cancion): \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\" favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\") try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\") delete(id_usuario, id_cancion) Elimina una canci\u00f3n de favoritos para un usuario Source code in musica_api\\resources.py @ns.doc(\"Eliminar una canci\u00f3n de favoritos\") @ns.response(204, \"Canci\u00f3n eliminada de favoritos\") @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\") def delete(self, id_usuario, id_cancion): \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\" favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\") try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\") post(id_usuario, id_cancion) Marca una canci\u00f3n como favorita para un usuario Source code in musica_api\\resources.py @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\") @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(204, \"Canci\u00f3n desmarcada como favorita\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") def post(self, id_usuario, id_cancion): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" usuario = Usuario.query.get(id_usuario) cancion = Cancion.query.get(id_cancion) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first() if favorito: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion) try: db.session.add(favorito) db.session.commit() return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") UsuarioFavoritosAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id>/favoritos\") @ns.param(\"id\", \"Identificador \u00fanico del usuario\") @ns.response(404, \"Usuario no encontrado\") class UsuarioFavoritosAPI(Resource): @ns.doc(\"Obtener las canciones favoritas de un usuario\") @ns.marshal_with(favoritos_usuario_model) def get(self, id): \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\" usuario = Usuario.query.get_or_404(id) favoritos = Favorito.query.filter_by(id_usuario=id).all() canciones_favoritas = [ { \"id\": favorito.cancion.id, \"titulo\": favorito.cancion.titulo, \"artista\": favorito.cancion.artista, } for favorito in favoritos ] return { \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre}, \"canciones_favoritas\": canciones_favoritas, }, 200 get(id) Obtiene todas las canciones favoritas de un usuario Source code in musica_api\\resources.py @ns.doc(\"Obtener las canciones favoritas de un usuario\") @ns.marshal_with(favoritos_usuario_model) def get(self, id): \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\" usuario = Usuario.query.get_or_404(id) favoritos = Favorito.query.filter_by(id_usuario=id).all() canciones_favoritas = [ { \"id\": favorito.cancion.id, \"titulo\": favorito.cancion.titulo, \"artista\": favorito.cancion.artista, } for favorito in favoritos ] return { \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre}, \"canciones_favoritas\": canciones_favoritas, }, 200 UsuarioListAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios\") class UsuarioListAPI(Resource): @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 @ns.doc(\"Marcar una canci\u00f3n como favorita\") @ns.expect(favorito_input) @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") @ns.marshal_with(favorito_model) def post(self): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" data = request.json usuario = Usuario.query.get(data[\"id_usuario\"]) cancion = Cancion.query.get(data[\"id_cancion\"]) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito_existente = Favorito.query.filter_by( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ).first() if favorito_existente: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ) try: db.session.add(favorito) db.session.commit() return favorito, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") get() Obtiene todos los usuarios registrados (paginados) Source code in musica_api\\resources.py @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 post() Marca una canci\u00f3n como favorita para un usuario Source code in musica_api\\resources.py @ns.doc(\"Marcar una canci\u00f3n como favorita\") @ns.expect(favorito_input) @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") @ns.marshal_with(favorito_model) def post(self): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" data = request.json usuario = Usuario.query.get(data[\"id_usuario\"]) cancion = Cancion.query.get(data[\"id_cancion\"]) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito_existente = Favorito.query.filter_by( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ).first() if favorito_existente: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ) try: db.session.add(favorito) db.session.commit() return favorito, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") get(self) Obtiene todos los usuarios registrados (paginados) Source code in musica_api\\resources.py @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 @ns.doc(\"Crear un nuevo usuario\") @ns.expect(usuario_base) @ns.response(201, \"Usuario creado con \u00e9xito\") @ns.response(400, \"Datos inv\u00e1lidos o correo ya existe\") @ns.marshal_with(usuario_model) def post(self): \"\"\"Crea un nuevo usuario\"\"\" data = request.json if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario = Usuario(nombre=data[\"nombre\"], correo=data[\"correo\"]) try: db.session.add(usuario) db.session.commit() return usuario, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear usuario: {str(e)}\")","title":"Modelos"},{"location":"models/#modulo-de-modelos-de-datos","text":"M\u00f3dulo de recursos de la API. Define los endpoints, controladores y la l\u00f3gica de negocio de la API.","title":"M\u00f3dulo de modelos de datos"},{"location":"models/#musica_api.resources.CancionAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico de la canci\u00f3n\") @ns.response(404, \"Canci\u00f3n no encontrada\") class CancionAPI(Resource): @ns.doc(\"Obtener una canci\u00f3n por su ID\") @ns.marshal_with(cancion_model) def get(self, id): \"\"\"Obtiene una canci\u00f3n por su ID\"\"\" return Cancion.query.get_or_404(id), 200 @ns.doc(\"Actualizar una canci\u00f3n\") @ns.expect(cancion_base) @ns.marshal_with(cancion_model) def put(self, id): \"\"\"Actualiza una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) data = request.json cancion.titulo = data.get(\"titulo\", cancion.titulo) cancion.artista = data.get(\"artista\", cancion.artista) cancion.album = data.get(\"album\", cancion.album) cancion.duracion = data.get(\"duracion\", cancion.duracion) cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o) cancion.genero = data.get(\"genero\", cancion.genero) try: db.session.commit() return cancion except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\") @ns.doc(\"Eliminar una canci\u00f3n\") @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\") def delete(self, id): \"\"\"Elimina una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) try: db.session.delete(cancion) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\")","title":"CancionAPI"},{"location":"models/#musica_api.resources.CancionAPI.delete","text":"Elimina una canci\u00f3n existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar una canci\u00f3n\") @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\") def delete(self, id): \"\"\"Elimina una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) try: db.session.delete(cancion) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\")","title":"delete"},{"location":"models/#musica_api.resources.CancionAPI.get","text":"Obtiene una canci\u00f3n por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener una canci\u00f3n por su ID\") @ns.marshal_with(cancion_model) def get(self, id): \"\"\"Obtiene una canci\u00f3n por su ID\"\"\" return Cancion.query.get_or_404(id), 200","title":"get"},{"location":"models/#musica_api.resources.CancionAPI.put","text":"Actualiza una canci\u00f3n existente Source code in musica_api\\resources.py @ns.doc(\"Actualizar una canci\u00f3n\") @ns.expect(cancion_base) @ns.marshal_with(cancion_model) def put(self, id): \"\"\"Actualiza una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) data = request.json cancion.titulo = data.get(\"titulo\", cancion.titulo) cancion.artista = data.get(\"artista\", cancion.artista) cancion.album = data.get(\"album\", cancion.album) cancion.duracion = data.get(\"duracion\", cancion.duracion) cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o) cancion.genero = data.get(\"genero\", cancion.genero) try: db.session.commit() return cancion except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\")","title":"put"},{"location":"models/#musica_api.resources.CancionBusquedaAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones/buscar\") class CancionBusquedaAPI(Resource): @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\") @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\") @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\") @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\" titulo = request.args.get(\"titulo\") artista = request.args.get(\"artista\") genero = request.args.get(\"genero\") query = Cancion.query if titulo: query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\")) if artista: query = query.filter(Cancion.artista.ilike(f\"%{artista}%\")) if genero: query = query.filter(Cancion.genero == genero) return query.all(), 200","title":"CancionBusquedaAPI"},{"location":"models/#musica_api.resources.CancionBusquedaAPI.get","text":"Busca canciones por t\u00edtulo, artista o g\u00e9nero Source code in musica_api\\resources.py @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\") @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\") @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\") @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\" titulo = request.args.get(\"titulo\") artista = request.args.get(\"artista\") genero = request.args.get(\"genero\") query = Cancion.query if titulo: query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\")) if artista: query = query.filter(Cancion.artista.ilike(f\"%{artista}%\")) if genero: query = query.filter(Cancion.genero == genero) return query.all(), 200","title":"get"},{"location":"models/#musica_api.resources.CancionListAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones\") class CancionListAPI(Resource): @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) canciones = Cancion.query.paginate( page=page, per_page=per_page, error_out=False ) return canciones.items, 200 @ns.doc(\"Crear una nueva canci\u00f3n\") @ns.expect(cancion_base) @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\") @ns.marshal_with(cancion_model) def post(self): \"\"\"Crea una nueva canci\u00f3n\"\"\" data = request.json cancion = Cancion( titulo=data[\"titulo\"], artista=data[\"artista\"], album=data.get(\"album\"), duracion=data.get(\"duracion\"), a\u00f1o=data.get(\"a\u00f1o\"), genero=data.get(\"genero\"), ) try: db.session.add(cancion) db.session.commit() return cancion, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\")","title":"CancionListAPI"},{"location":"models/#musica_api.resources.CancionListAPI.get","text":"Obtiene todas las canciones registradas (paginadas) Source code in musica_api\\resources.py @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) canciones = Cancion.query.paginate( page=page, per_page=per_page, error_out=False ) return canciones.items, 200","title":"get"},{"location":"models/#musica_api.resources.CancionListAPI.post","text":"Crea una nueva canci\u00f3n Source code in musica_api\\resources.py @ns.doc(\"Crear una nueva canci\u00f3n\") @ns.expect(cancion_base) @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\") @ns.marshal_with(cancion_model) def post(self): \"\"\"Crea una nueva canci\u00f3n\"\"\" data = request.json cancion = Cancion( titulo=data[\"titulo\"], artista=data[\"artista\"], album=data.get(\"album\"), duracion=data.get(\"duracion\"), a\u00f1o=data.get(\"a\u00f1o\"), genero=data.get(\"genero\"), ) try: db.session.add(cancion) db.session.commit() return cancion, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\")","title":"post"},{"location":"models/#musica_api.resources.FavoritoAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/favoritos/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico del favorito\") @ns.response(404, \"Favorito no encontrado\") class FavoritoAPI(Resource): @ns.doc(\"Obtener un favorito por su ID\") @ns.marshal_with(favorito_model) def get(self, id): \"\"\"Obtiene un registro de favorito por su ID\"\"\" return Favorito.query.get_or_404(id), 200 @ns.doc(\"Eliminar un favorito\") @ns.response(204, \"Favorito eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un registro de favorito existente\"\"\" favorito = Favorito.query.get_or_404(id) try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")","title":"FavoritoAPI"},{"location":"models/#musica_api.resources.FavoritoAPI.delete","text":"Elimina un registro de favorito existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar un favorito\") @ns.response(204, \"Favorito eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un registro de favorito existente\"\"\" favorito = Favorito.query.get_or_404(id) try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")","title":"delete"},{"location":"models/#musica_api.resources.FavoritoAPI.get","text":"Obtiene un registro de favorito por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener un favorito por su ID\") @ns.marshal_with(favorito_model) def get(self, id): \"\"\"Obtiene un registro de favorito por su ID\"\"\" return Favorito.query.get_or_404(id), 200","title":"get"},{"location":"models/#musica_api.resources.Home","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/\") class Home(Resource): @ns.doc(\"P\u00e1gina principal de la API\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\" return { \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\" }, 200","title":"Home"},{"location":"models/#musica_api.resources.Home.get","text":"Mensaje de bienvenida en la ra\u00edz de la API Source code in musica_api\\resources.py @ns.doc(\"P\u00e1gina principal de la API\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\" return { \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\" }, 200","title":"get"},{"location":"models/#musica_api.resources.Ping","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/ping\") class Ping(Resource): @ns.response(200, \"API funcionando correctamente\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\" return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200","title":"Ping"},{"location":"models/#musica_api.resources.Ping.get","text":"Endpoint para verificar que la API est\u00e1 funcionando Source code in musica_api\\resources.py @ns.response(200, \"API funcionando correctamente\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\" return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200","title":"get"},{"location":"models/#musica_api.resources.UsuarioAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico del usuario\") @ns.response(404, \"Usuario no encontrado\") class UsuarioAPI(Resource): @ns.doc(\"Obtener un usuario por su ID\") @ns.marshal_with(usuario_model) def get(self, id): \"\"\"Obtiene un usuario por su ID\"\"\" return Usuario.query.get_or_404(id), 200 @ns.doc(\"Actualizar un usuario\") @ns.expect(usuario_base) @ns.marshal_with(usuario_model) def put(self, id): \"\"\"Actualiza un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) data = request.json if \"correo\" in data and data[\"correo\"] != usuario.correo: if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario.nombre = data.get(\"nombre\", usuario.nombre) usuario.correo = data.get(\"correo\", usuario.correo) try: db.session.commit() return usuario except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar usuario: {str(e)}\") @ns.doc(\"Eliminar un usuario\") @ns.response(204, \"Usuario eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) try: db.session.delete(usuario) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar usuario: {str(e)}\")","title":"UsuarioAPI"},{"location":"models/#musica_api.resources.UsuarioAPI.delete","text":"Elimina un usuario existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar un usuario\") @ns.response(204, \"Usuario eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) try: db.session.delete(usuario) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar usuario: {str(e)}\")","title":"delete"},{"location":"models/#musica_api.resources.UsuarioAPI.get","text":"Obtiene un usuario por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener un usuario por su ID\") @ns.marshal_with(usuario_model) def get(self, id): \"\"\"Obtiene un usuario por su ID\"\"\" return Usuario.query.get_or_404(id), 200","title":"get"},{"location":"models/#musica_api.resources.UsuarioAPI.put","text":"Actualiza un usuario existente Source code in musica_api\\resources.py @ns.doc(\"Actualizar un usuario\") @ns.expect(usuario_base) @ns.marshal_with(usuario_model) def put(self, id): \"\"\"Actualiza un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) data = request.json if \"correo\" in data and data[\"correo\"] != usuario.correo: if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario.nombre = data.get(\"nombre\", usuario.nombre) usuario.correo = data.get(\"correo\", usuario.correo) try: db.session.commit() return usuario except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar usuario: {str(e)}\")","title":"put"},{"location":"models/#musica_api.resources.UsuarioCancionFavoritoAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id_usuario>/favoritos/<int:id_cancion>\") @ns.param(\"id_usuario\", \"Identificador \u00fanico del usuario\") @ns.param(\"id_cancion\", \"Identificador \u00fanico de la canci\u00f3n\") class UsuarioCancionFavoritoAPI(Resource): @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\") @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(204, \"Canci\u00f3n desmarcada como favorita\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") def post(self, id_usuario, id_cancion): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" usuario = Usuario.query.get(id_usuario) cancion = Cancion.query.get(id_cancion) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first() if favorito: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion) try: db.session.add(favorito) db.session.commit() return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") @ns.doc(\"Eliminar una canci\u00f3n de favoritos\") @ns.response(204, \"Canci\u00f3n eliminada de favoritos\") @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\") def delete(self, id_usuario, id_cancion): \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\" favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\") try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")","title":"UsuarioCancionFavoritoAPI"},{"location":"models/#musica_api.resources.UsuarioCancionFavoritoAPI.delete","text":"Elimina una canci\u00f3n de favoritos para un usuario Source code in musica_api\\resources.py @ns.doc(\"Eliminar una canci\u00f3n de favoritos\") @ns.response(204, \"Canci\u00f3n eliminada de favoritos\") @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\") def delete(self, id_usuario, id_cancion): \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\" favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\") try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")","title":"delete"},{"location":"models/#musica_api.resources.UsuarioCancionFavoritoAPI.post","text":"Marca una canci\u00f3n como favorita para un usuario Source code in musica_api\\resources.py @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\") @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(204, \"Canci\u00f3n desmarcada como favorita\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") def post(self, id_usuario, id_cancion): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" usuario = Usuario.query.get(id_usuario) cancion = Cancion.query.get(id_cancion) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first() if favorito: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion) try: db.session.add(favorito) db.session.commit() return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")","title":"post"},{"location":"models/#musica_api.resources.UsuarioFavoritosAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id>/favoritos\") @ns.param(\"id\", \"Identificador \u00fanico del usuario\") @ns.response(404, \"Usuario no encontrado\") class UsuarioFavoritosAPI(Resource): @ns.doc(\"Obtener las canciones favoritas de un usuario\") @ns.marshal_with(favoritos_usuario_model) def get(self, id): \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\" usuario = Usuario.query.get_or_404(id) favoritos = Favorito.query.filter_by(id_usuario=id).all() canciones_favoritas = [ { \"id\": favorito.cancion.id, \"titulo\": favorito.cancion.titulo, \"artista\": favorito.cancion.artista, } for favorito in favoritos ] return { \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre}, \"canciones_favoritas\": canciones_favoritas, }, 200","title":"UsuarioFavoritosAPI"},{"location":"models/#musica_api.resources.UsuarioFavoritosAPI.get","text":"Obtiene todas las canciones favoritas de un usuario Source code in musica_api\\resources.py @ns.doc(\"Obtener las canciones favoritas de un usuario\") @ns.marshal_with(favoritos_usuario_model) def get(self, id): \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\" usuario = Usuario.query.get_or_404(id) favoritos = Favorito.query.filter_by(id_usuario=id).all() canciones_favoritas = [ { \"id\": favorito.cancion.id, \"titulo\": favorito.cancion.titulo, \"artista\": favorito.cancion.artista, } for favorito in favoritos ] return { \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre}, \"canciones_favoritas\": canciones_favoritas, }, 200","title":"get"},{"location":"models/#musica_api.resources.UsuarioListAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios\") class UsuarioListAPI(Resource): @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 @ns.doc(\"Marcar una canci\u00f3n como favorita\") @ns.expect(favorito_input) @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") @ns.marshal_with(favorito_model) def post(self): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" data = request.json usuario = Usuario.query.get(data[\"id_usuario\"]) cancion = Cancion.query.get(data[\"id_cancion\"]) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito_existente = Favorito.query.filter_by( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ).first() if favorito_existente: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ) try: db.session.add(favorito) db.session.commit() return favorito, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")","title":"UsuarioListAPI"},{"location":"models/#musica_api.resources.UsuarioListAPI.get","text":"Obtiene todos los usuarios registrados (paginados) Source code in musica_api\\resources.py @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200","title":"get"},{"location":"models/#musica_api.resources.UsuarioListAPI.post","text":"Marca una canci\u00f3n como favorita para un usuario Source code in musica_api\\resources.py @ns.doc(\"Marcar una canci\u00f3n como favorita\") @ns.expect(favorito_input) @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") @ns.marshal_with(favorito_model) def post(self): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" data = request.json usuario = Usuario.query.get(data[\"id_usuario\"]) cancion = Cancion.query.get(data[\"id_cancion\"]) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito_existente = Favorito.query.filter_by( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ).first() if favorito_existente: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ) try: db.session.add(favorito) db.session.commit() return favorito, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")","title":"post"},{"location":"models/#musica_api.resources.get","text":"Obtiene todos los usuarios registrados (paginados) Source code in musica_api\\resources.py @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 @ns.doc(\"Crear un nuevo usuario\") @ns.expect(usuario_base) @ns.response(201, \"Usuario creado con \u00e9xito\") @ns.response(400, \"Datos inv\u00e1lidos o correo ya existe\") @ns.marshal_with(usuario_model) def post(self): \"\"\"Crea un nuevo usuario\"\"\" data = request.json if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario = Usuario(nombre=data[\"nombre\"], correo=data[\"correo\"]) try: db.session.add(usuario) db.session.commit() return usuario, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear usuario: {str(e)}\")","title":"get"},{"location":"resources/","text":"M\u00f3dulo recursos M\u00f3dulo de recursos de la API. Define los endpoints, controladores y la l\u00f3gica de negocio de la API. CancionAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico de la canci\u00f3n\") @ns.response(404, \"Canci\u00f3n no encontrada\") class CancionAPI(Resource): @ns.doc(\"Obtener una canci\u00f3n por su ID\") @ns.marshal_with(cancion_model) def get(self, id): \"\"\"Obtiene una canci\u00f3n por su ID\"\"\" return Cancion.query.get_or_404(id), 200 @ns.doc(\"Actualizar una canci\u00f3n\") @ns.expect(cancion_base) @ns.marshal_with(cancion_model) def put(self, id): \"\"\"Actualiza una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) data = request.json cancion.titulo = data.get(\"titulo\", cancion.titulo) cancion.artista = data.get(\"artista\", cancion.artista) cancion.album = data.get(\"album\", cancion.album) cancion.duracion = data.get(\"duracion\", cancion.duracion) cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o) cancion.genero = data.get(\"genero\", cancion.genero) try: db.session.commit() return cancion except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\") @ns.doc(\"Eliminar una canci\u00f3n\") @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\") def delete(self, id): \"\"\"Elimina una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) try: db.session.delete(cancion) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\") delete(id) Elimina una canci\u00f3n existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar una canci\u00f3n\") @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\") def delete(self, id): \"\"\"Elimina una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) try: db.session.delete(cancion) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\") get(id) Obtiene una canci\u00f3n por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener una canci\u00f3n por su ID\") @ns.marshal_with(cancion_model) def get(self, id): \"\"\"Obtiene una canci\u00f3n por su ID\"\"\" return Cancion.query.get_or_404(id), 200 put(id) Actualiza una canci\u00f3n existente Source code in musica_api\\resources.py @ns.doc(\"Actualizar una canci\u00f3n\") @ns.expect(cancion_base) @ns.marshal_with(cancion_model) def put(self, id): \"\"\"Actualiza una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) data = request.json cancion.titulo = data.get(\"titulo\", cancion.titulo) cancion.artista = data.get(\"artista\", cancion.artista) cancion.album = data.get(\"album\", cancion.album) cancion.duracion = data.get(\"duracion\", cancion.duracion) cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o) cancion.genero = data.get(\"genero\", cancion.genero) try: db.session.commit() return cancion except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\") CancionBusquedaAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones/buscar\") class CancionBusquedaAPI(Resource): @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\") @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\") @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\") @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\" titulo = request.args.get(\"titulo\") artista = request.args.get(\"artista\") genero = request.args.get(\"genero\") query = Cancion.query if titulo: query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\")) if artista: query = query.filter(Cancion.artista.ilike(f\"%{artista}%\")) if genero: query = query.filter(Cancion.genero == genero) return query.all(), 200 get() Busca canciones por t\u00edtulo, artista o g\u00e9nero Source code in musica_api\\resources.py @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\") @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\") @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\") @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\" titulo = request.args.get(\"titulo\") artista = request.args.get(\"artista\") genero = request.args.get(\"genero\") query = Cancion.query if titulo: query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\")) if artista: query = query.filter(Cancion.artista.ilike(f\"%{artista}%\")) if genero: query = query.filter(Cancion.genero == genero) return query.all(), 200 CancionListAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones\") class CancionListAPI(Resource): @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) canciones = Cancion.query.paginate( page=page, per_page=per_page, error_out=False ) return canciones.items, 200 @ns.doc(\"Crear una nueva canci\u00f3n\") @ns.expect(cancion_base) @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\") @ns.marshal_with(cancion_model) def post(self): \"\"\"Crea una nueva canci\u00f3n\"\"\" data = request.json cancion = Cancion( titulo=data[\"titulo\"], artista=data[\"artista\"], album=data.get(\"album\"), duracion=data.get(\"duracion\"), a\u00f1o=data.get(\"a\u00f1o\"), genero=data.get(\"genero\"), ) try: db.session.add(cancion) db.session.commit() return cancion, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\") get() Obtiene todas las canciones registradas (paginadas) Source code in musica_api\\resources.py @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) canciones = Cancion.query.paginate( page=page, per_page=per_page, error_out=False ) return canciones.items, 200 post() Crea una nueva canci\u00f3n Source code in musica_api\\resources.py @ns.doc(\"Crear una nueva canci\u00f3n\") @ns.expect(cancion_base) @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\") @ns.marshal_with(cancion_model) def post(self): \"\"\"Crea una nueva canci\u00f3n\"\"\" data = request.json cancion = Cancion( titulo=data[\"titulo\"], artista=data[\"artista\"], album=data.get(\"album\"), duracion=data.get(\"duracion\"), a\u00f1o=data.get(\"a\u00f1o\"), genero=data.get(\"genero\"), ) try: db.session.add(cancion) db.session.commit() return cancion, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\") FavoritoAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/favoritos/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico del favorito\") @ns.response(404, \"Favorito no encontrado\") class FavoritoAPI(Resource): @ns.doc(\"Obtener un favorito por su ID\") @ns.marshal_with(favorito_model) def get(self, id): \"\"\"Obtiene un registro de favorito por su ID\"\"\" return Favorito.query.get_or_404(id), 200 @ns.doc(\"Eliminar un favorito\") @ns.response(204, \"Favorito eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un registro de favorito existente\"\"\" favorito = Favorito.query.get_or_404(id) try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\") delete(id) Elimina un registro de favorito existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar un favorito\") @ns.response(204, \"Favorito eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un registro de favorito existente\"\"\" favorito = Favorito.query.get_or_404(id) try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\") get(id) Obtiene un registro de favorito por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener un favorito por su ID\") @ns.marshal_with(favorito_model) def get(self, id): \"\"\"Obtiene un registro de favorito por su ID\"\"\" return Favorito.query.get_or_404(id), 200 Home Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/\") class Home(Resource): @ns.doc(\"P\u00e1gina principal de la API\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\" return { \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\" }, 200 get() Mensaje de bienvenida en la ra\u00edz de la API Source code in musica_api\\resources.py @ns.doc(\"P\u00e1gina principal de la API\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\" return { \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\" }, 200 Ping Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/ping\") class Ping(Resource): @ns.response(200, \"API funcionando correctamente\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\" return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200 get() Endpoint para verificar que la API est\u00e1 funcionando Source code in musica_api\\resources.py @ns.response(200, \"API funcionando correctamente\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\" return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200 UsuarioAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico del usuario\") @ns.response(404, \"Usuario no encontrado\") class UsuarioAPI(Resource): @ns.doc(\"Obtener un usuario por su ID\") @ns.marshal_with(usuario_model) def get(self, id): \"\"\"Obtiene un usuario por su ID\"\"\" return Usuario.query.get_or_404(id), 200 @ns.doc(\"Actualizar un usuario\") @ns.expect(usuario_base) @ns.marshal_with(usuario_model) def put(self, id): \"\"\"Actualiza un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) data = request.json if \"correo\" in data and data[\"correo\"] != usuario.correo: if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario.nombre = data.get(\"nombre\", usuario.nombre) usuario.correo = data.get(\"correo\", usuario.correo) try: db.session.commit() return usuario except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar usuario: {str(e)}\") @ns.doc(\"Eliminar un usuario\") @ns.response(204, \"Usuario eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) try: db.session.delete(usuario) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar usuario: {str(e)}\") delete(id) Elimina un usuario existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar un usuario\") @ns.response(204, \"Usuario eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) try: db.session.delete(usuario) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar usuario: {str(e)}\") get(id) Obtiene un usuario por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener un usuario por su ID\") @ns.marshal_with(usuario_model) def get(self, id): \"\"\"Obtiene un usuario por su ID\"\"\" return Usuario.query.get_or_404(id), 200 put(id) Actualiza un usuario existente Source code in musica_api\\resources.py @ns.doc(\"Actualizar un usuario\") @ns.expect(usuario_base) @ns.marshal_with(usuario_model) def put(self, id): \"\"\"Actualiza un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) data = request.json if \"correo\" in data and data[\"correo\"] != usuario.correo: if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario.nombre = data.get(\"nombre\", usuario.nombre) usuario.correo = data.get(\"correo\", usuario.correo) try: db.session.commit() return usuario except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar usuario: {str(e)}\") UsuarioCancionFavoritoAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id_usuario>/favoritos/<int:id_cancion>\") @ns.param(\"id_usuario\", \"Identificador \u00fanico del usuario\") @ns.param(\"id_cancion\", \"Identificador \u00fanico de la canci\u00f3n\") class UsuarioCancionFavoritoAPI(Resource): @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\") @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(204, \"Canci\u00f3n desmarcada como favorita\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") def post(self, id_usuario, id_cancion): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" usuario = Usuario.query.get(id_usuario) cancion = Cancion.query.get(id_cancion) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first() if favorito: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion) try: db.session.add(favorito) db.session.commit() return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") @ns.doc(\"Eliminar una canci\u00f3n de favoritos\") @ns.response(204, \"Canci\u00f3n eliminada de favoritos\") @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\") def delete(self, id_usuario, id_cancion): \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\" favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\") try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\") delete(id_usuario, id_cancion) Elimina una canci\u00f3n de favoritos para un usuario Source code in musica_api\\resources.py @ns.doc(\"Eliminar una canci\u00f3n de favoritos\") @ns.response(204, \"Canci\u00f3n eliminada de favoritos\") @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\") def delete(self, id_usuario, id_cancion): \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\" favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\") try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\") post(id_usuario, id_cancion) Marca una canci\u00f3n como favorita para un usuario Source code in musica_api\\resources.py @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\") @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(204, \"Canci\u00f3n desmarcada como favorita\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") def post(self, id_usuario, id_cancion): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" usuario = Usuario.query.get(id_usuario) cancion = Cancion.query.get(id_cancion) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first() if favorito: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion) try: db.session.add(favorito) db.session.commit() return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") UsuarioFavoritosAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id>/favoritos\") @ns.param(\"id\", \"Identificador \u00fanico del usuario\") @ns.response(404, \"Usuario no encontrado\") class UsuarioFavoritosAPI(Resource): @ns.doc(\"Obtener las canciones favoritas de un usuario\") @ns.marshal_with(favoritos_usuario_model) def get(self, id): \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\" usuario = Usuario.query.get_or_404(id) favoritos = Favorito.query.filter_by(id_usuario=id).all() canciones_favoritas = [ { \"id\": favorito.cancion.id, \"titulo\": favorito.cancion.titulo, \"artista\": favorito.cancion.artista, } for favorito in favoritos ] return { \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre}, \"canciones_favoritas\": canciones_favoritas, }, 200 get(id) Obtiene todas las canciones favoritas de un usuario Source code in musica_api\\resources.py @ns.doc(\"Obtener las canciones favoritas de un usuario\") @ns.marshal_with(favoritos_usuario_model) def get(self, id): \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\" usuario = Usuario.query.get_or_404(id) favoritos = Favorito.query.filter_by(id_usuario=id).all() canciones_favoritas = [ { \"id\": favorito.cancion.id, \"titulo\": favorito.cancion.titulo, \"artista\": favorito.cancion.artista, } for favorito in favoritos ] return { \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre}, \"canciones_favoritas\": canciones_favoritas, }, 200 UsuarioListAPI Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios\") class UsuarioListAPI(Resource): @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 @ns.doc(\"Marcar una canci\u00f3n como favorita\") @ns.expect(favorito_input) @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") @ns.marshal_with(favorito_model) def post(self): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" data = request.json usuario = Usuario.query.get(data[\"id_usuario\"]) cancion = Cancion.query.get(data[\"id_cancion\"]) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito_existente = Favorito.query.filter_by( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ).first() if favorito_existente: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ) try: db.session.add(favorito) db.session.commit() return favorito, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") get() Obtiene todos los usuarios registrados (paginados) Source code in musica_api\\resources.py @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 post() Marca una canci\u00f3n como favorita para un usuario Source code in musica_api\\resources.py @ns.doc(\"Marcar una canci\u00f3n como favorita\") @ns.expect(favorito_input) @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") @ns.marshal_with(favorito_model) def post(self): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" data = request.json usuario = Usuario.query.get(data[\"id_usuario\"]) cancion = Cancion.query.get(data[\"id_cancion\"]) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito_existente = Favorito.query.filter_by( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ).first() if favorito_existente: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ) try: db.session.add(favorito) db.session.commit() return favorito, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") get(self) Obtiene todos los usuarios registrados (paginados) Source code in musica_api\\resources.py @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 @ns.doc(\"Crear un nuevo usuario\") @ns.expect(usuario_base) @ns.response(201, \"Usuario creado con \u00e9xito\") @ns.response(400, \"Datos inv\u00e1lidos o correo ya existe\") @ns.marshal_with(usuario_model) def post(self): \"\"\"Crea un nuevo usuario\"\"\" data = request.json if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario = Usuario(nombre=data[\"nombre\"], correo=data[\"correo\"]) try: db.session.add(usuario) db.session.commit() return usuario, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear usuario: {str(e)}\")","title":"Recursos"},{"location":"resources/#modulo-recursos","text":"M\u00f3dulo de recursos de la API. Define los endpoints, controladores y la l\u00f3gica de negocio de la API.","title":"M\u00f3dulo recursos"},{"location":"resources/#musica_api.resources.CancionAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico de la canci\u00f3n\") @ns.response(404, \"Canci\u00f3n no encontrada\") class CancionAPI(Resource): @ns.doc(\"Obtener una canci\u00f3n por su ID\") @ns.marshal_with(cancion_model) def get(self, id): \"\"\"Obtiene una canci\u00f3n por su ID\"\"\" return Cancion.query.get_or_404(id), 200 @ns.doc(\"Actualizar una canci\u00f3n\") @ns.expect(cancion_base) @ns.marshal_with(cancion_model) def put(self, id): \"\"\"Actualiza una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) data = request.json cancion.titulo = data.get(\"titulo\", cancion.titulo) cancion.artista = data.get(\"artista\", cancion.artista) cancion.album = data.get(\"album\", cancion.album) cancion.duracion = data.get(\"duracion\", cancion.duracion) cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o) cancion.genero = data.get(\"genero\", cancion.genero) try: db.session.commit() return cancion except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\") @ns.doc(\"Eliminar una canci\u00f3n\") @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\") def delete(self, id): \"\"\"Elimina una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) try: db.session.delete(cancion) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\")","title":"CancionAPI"},{"location":"resources/#musica_api.resources.CancionAPI.delete","text":"Elimina una canci\u00f3n existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar una canci\u00f3n\") @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\") def delete(self, id): \"\"\"Elimina una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) try: db.session.delete(cancion) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\")","title":"delete"},{"location":"resources/#musica_api.resources.CancionAPI.get","text":"Obtiene una canci\u00f3n por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener una canci\u00f3n por su ID\") @ns.marshal_with(cancion_model) def get(self, id): \"\"\"Obtiene una canci\u00f3n por su ID\"\"\" return Cancion.query.get_or_404(id), 200","title":"get"},{"location":"resources/#musica_api.resources.CancionAPI.put","text":"Actualiza una canci\u00f3n existente Source code in musica_api\\resources.py @ns.doc(\"Actualizar una canci\u00f3n\") @ns.expect(cancion_base) @ns.marshal_with(cancion_model) def put(self, id): \"\"\"Actualiza una canci\u00f3n existente\"\"\" cancion = Cancion.query.get_or_404(id) data = request.json cancion.titulo = data.get(\"titulo\", cancion.titulo) cancion.artista = data.get(\"artista\", cancion.artista) cancion.album = data.get(\"album\", cancion.album) cancion.duracion = data.get(\"duracion\", cancion.duracion) cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o) cancion.genero = data.get(\"genero\", cancion.genero) try: db.session.commit() return cancion except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\")","title":"put"},{"location":"resources/#musica_api.resources.CancionBusquedaAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones/buscar\") class CancionBusquedaAPI(Resource): @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\") @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\") @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\") @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\" titulo = request.args.get(\"titulo\") artista = request.args.get(\"artista\") genero = request.args.get(\"genero\") query = Cancion.query if titulo: query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\")) if artista: query = query.filter(Cancion.artista.ilike(f\"%{artista}%\")) if genero: query = query.filter(Cancion.genero == genero) return query.all(), 200","title":"CancionBusquedaAPI"},{"location":"resources/#musica_api.resources.CancionBusquedaAPI.get","text":"Busca canciones por t\u00edtulo, artista o g\u00e9nero Source code in musica_api\\resources.py @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\") @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\") @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\") @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\" titulo = request.args.get(\"titulo\") artista = request.args.get(\"artista\") genero = request.args.get(\"genero\") query = Cancion.query if titulo: query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\")) if artista: query = query.filter(Cancion.artista.ilike(f\"%{artista}%\")) if genero: query = query.filter(Cancion.genero == genero) return query.all(), 200","title":"get"},{"location":"resources/#musica_api.resources.CancionListAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/canciones\") class CancionListAPI(Resource): @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) canciones = Cancion.query.paginate( page=page, per_page=per_page, error_out=False ) return canciones.items, 200 @ns.doc(\"Crear una nueva canci\u00f3n\") @ns.expect(cancion_base) @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\") @ns.marshal_with(cancion_model) def post(self): \"\"\"Crea una nueva canci\u00f3n\"\"\" data = request.json cancion = Cancion( titulo=data[\"titulo\"], artista=data[\"artista\"], album=data.get(\"album\"), duracion=data.get(\"duracion\"), a\u00f1o=data.get(\"a\u00f1o\"), genero=data.get(\"genero\"), ) try: db.session.add(cancion) db.session.commit() return cancion, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\")","title":"CancionListAPI"},{"location":"resources/#musica_api.resources.CancionListAPI.get","text":"Obtiene todas las canciones registradas (paginadas) Source code in musica_api\\resources.py @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\") @ns.marshal_list_with(cancion_model) def get(self): \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) canciones = Cancion.query.paginate( page=page, per_page=per_page, error_out=False ) return canciones.items, 200","title":"get"},{"location":"resources/#musica_api.resources.CancionListAPI.post","text":"Crea una nueva canci\u00f3n Source code in musica_api\\resources.py @ns.doc(\"Crear una nueva canci\u00f3n\") @ns.expect(cancion_base) @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\") @ns.marshal_with(cancion_model) def post(self): \"\"\"Crea una nueva canci\u00f3n\"\"\" data = request.json cancion = Cancion( titulo=data[\"titulo\"], artista=data[\"artista\"], album=data.get(\"album\"), duracion=data.get(\"duracion\"), a\u00f1o=data.get(\"a\u00f1o\"), genero=data.get(\"genero\"), ) try: db.session.add(cancion) db.session.commit() return cancion, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\")","title":"post"},{"location":"resources/#musica_api.resources.FavoritoAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/favoritos/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico del favorito\") @ns.response(404, \"Favorito no encontrado\") class FavoritoAPI(Resource): @ns.doc(\"Obtener un favorito por su ID\") @ns.marshal_with(favorito_model) def get(self, id): \"\"\"Obtiene un registro de favorito por su ID\"\"\" return Favorito.query.get_or_404(id), 200 @ns.doc(\"Eliminar un favorito\") @ns.response(204, \"Favorito eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un registro de favorito existente\"\"\" favorito = Favorito.query.get_or_404(id) try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")","title":"FavoritoAPI"},{"location":"resources/#musica_api.resources.FavoritoAPI.delete","text":"Elimina un registro de favorito existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar un favorito\") @ns.response(204, \"Favorito eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un registro de favorito existente\"\"\" favorito = Favorito.query.get_or_404(id) try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")","title":"delete"},{"location":"resources/#musica_api.resources.FavoritoAPI.get","text":"Obtiene un registro de favorito por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener un favorito por su ID\") @ns.marshal_with(favorito_model) def get(self, id): \"\"\"Obtiene un registro de favorito por su ID\"\"\" return Favorito.query.get_or_404(id), 200","title":"get"},{"location":"resources/#musica_api.resources.Home","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/\") class Home(Resource): @ns.doc(\"P\u00e1gina principal de la API\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\" return { \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\" }, 200","title":"Home"},{"location":"resources/#musica_api.resources.Home.get","text":"Mensaje de bienvenida en la ra\u00edz de la API Source code in musica_api\\resources.py @ns.doc(\"P\u00e1gina principal de la API\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\" return { \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\" }, 200","title":"get"},{"location":"resources/#musica_api.resources.Ping","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/ping\") class Ping(Resource): @ns.response(200, \"API funcionando correctamente\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\" return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200","title":"Ping"},{"location":"resources/#musica_api.resources.Ping.get","text":"Endpoint para verificar que la API est\u00e1 funcionando Source code in musica_api\\resources.py @ns.response(200, \"API funcionando correctamente\") @ns.marshal_with(mensaje_model) def get(self): \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\" return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200","title":"get"},{"location":"resources/#musica_api.resources.UsuarioAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id>\") @ns.param(\"id\", \"Identificador \u00fanico del usuario\") @ns.response(404, \"Usuario no encontrado\") class UsuarioAPI(Resource): @ns.doc(\"Obtener un usuario por su ID\") @ns.marshal_with(usuario_model) def get(self, id): \"\"\"Obtiene un usuario por su ID\"\"\" return Usuario.query.get_or_404(id), 200 @ns.doc(\"Actualizar un usuario\") @ns.expect(usuario_base) @ns.marshal_with(usuario_model) def put(self, id): \"\"\"Actualiza un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) data = request.json if \"correo\" in data and data[\"correo\"] != usuario.correo: if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario.nombre = data.get(\"nombre\", usuario.nombre) usuario.correo = data.get(\"correo\", usuario.correo) try: db.session.commit() return usuario except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar usuario: {str(e)}\") @ns.doc(\"Eliminar un usuario\") @ns.response(204, \"Usuario eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) try: db.session.delete(usuario) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar usuario: {str(e)}\")","title":"UsuarioAPI"},{"location":"resources/#musica_api.resources.UsuarioAPI.delete","text":"Elimina un usuario existente Source code in musica_api\\resources.py @ns.doc(\"Eliminar un usuario\") @ns.response(204, \"Usuario eliminado con \u00e9xito\") def delete(self, id): \"\"\"Elimina un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) try: db.session.delete(usuario) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar usuario: {str(e)}\")","title":"delete"},{"location":"resources/#musica_api.resources.UsuarioAPI.get","text":"Obtiene un usuario por su ID Source code in musica_api\\resources.py @ns.doc(\"Obtener un usuario por su ID\") @ns.marshal_with(usuario_model) def get(self, id): \"\"\"Obtiene un usuario por su ID\"\"\" return Usuario.query.get_or_404(id), 200","title":"get"},{"location":"resources/#musica_api.resources.UsuarioAPI.put","text":"Actualiza un usuario existente Source code in musica_api\\resources.py @ns.doc(\"Actualizar un usuario\") @ns.expect(usuario_base) @ns.marshal_with(usuario_model) def put(self, id): \"\"\"Actualiza un usuario existente\"\"\" usuario = Usuario.query.get_or_404(id) data = request.json if \"correo\" in data and data[\"correo\"] != usuario.correo: if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario.nombre = data.get(\"nombre\", usuario.nombre) usuario.correo = data.get(\"correo\", usuario.correo) try: db.session.commit() return usuario except Exception as e: db.session.rollback() ns.abort(400, f\"Error al actualizar usuario: {str(e)}\")","title":"put"},{"location":"resources/#musica_api.resources.UsuarioCancionFavoritoAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id_usuario>/favoritos/<int:id_cancion>\") @ns.param(\"id_usuario\", \"Identificador \u00fanico del usuario\") @ns.param(\"id_cancion\", \"Identificador \u00fanico de la canci\u00f3n\") class UsuarioCancionFavoritoAPI(Resource): @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\") @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(204, \"Canci\u00f3n desmarcada como favorita\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") def post(self, id_usuario, id_cancion): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" usuario = Usuario.query.get(id_usuario) cancion = Cancion.query.get(id_cancion) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first() if favorito: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion) try: db.session.add(favorito) db.session.commit() return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\") @ns.doc(\"Eliminar una canci\u00f3n de favoritos\") @ns.response(204, \"Canci\u00f3n eliminada de favoritos\") @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\") def delete(self, id_usuario, id_cancion): \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\" favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\") try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")","title":"UsuarioCancionFavoritoAPI"},{"location":"resources/#musica_api.resources.UsuarioCancionFavoritoAPI.delete","text":"Elimina una canci\u00f3n de favoritos para un usuario Source code in musica_api\\resources.py @ns.doc(\"Eliminar una canci\u00f3n de favoritos\") @ns.response(204, \"Canci\u00f3n eliminada de favoritos\") @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\") def delete(self, id_usuario, id_cancion): \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\" favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\") try: db.session.delete(favorito) db.session.commit() return {}, 204 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")","title":"delete"},{"location":"resources/#musica_api.resources.UsuarioCancionFavoritoAPI.post","text":"Marca una canci\u00f3n como favorita para un usuario Source code in musica_api\\resources.py @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\") @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(204, \"Canci\u00f3n desmarcada como favorita\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") def post(self, id_usuario, id_cancion): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" usuario = Usuario.query.get(id_usuario) cancion = Cancion.query.get(id_cancion) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito = Favorito.query.filter_by( id_usuario=id_usuario, id_cancion=id_cancion ).first() if favorito: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion) try: db.session.add(favorito) db.session.commit() return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")","title":"post"},{"location":"resources/#musica_api.resources.UsuarioFavoritosAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios/<int:id>/favoritos\") @ns.param(\"id\", \"Identificador \u00fanico del usuario\") @ns.response(404, \"Usuario no encontrado\") class UsuarioFavoritosAPI(Resource): @ns.doc(\"Obtener las canciones favoritas de un usuario\") @ns.marshal_with(favoritos_usuario_model) def get(self, id): \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\" usuario = Usuario.query.get_or_404(id) favoritos = Favorito.query.filter_by(id_usuario=id).all() canciones_favoritas = [ { \"id\": favorito.cancion.id, \"titulo\": favorito.cancion.titulo, \"artista\": favorito.cancion.artista, } for favorito in favoritos ] return { \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre}, \"canciones_favoritas\": canciones_favoritas, }, 200","title":"UsuarioFavoritosAPI"},{"location":"resources/#musica_api.resources.UsuarioFavoritosAPI.get","text":"Obtiene todas las canciones favoritas de un usuario Source code in musica_api\\resources.py @ns.doc(\"Obtener las canciones favoritas de un usuario\") @ns.marshal_with(favoritos_usuario_model) def get(self, id): \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\" usuario = Usuario.query.get_or_404(id) favoritos = Favorito.query.filter_by(id_usuario=id).all() canciones_favoritas = [ { \"id\": favorito.cancion.id, \"titulo\": favorito.cancion.titulo, \"artista\": favorito.cancion.artista, } for favorito in favoritos ] return { \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre}, \"canciones_favoritas\": canciones_favoritas, }, 200","title":"get"},{"location":"resources/#musica_api.resources.UsuarioListAPI","text":"Bases: Resource Source code in musica_api\\resources.py @ns.route(\"/usuarios\") class UsuarioListAPI(Resource): @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 @ns.doc(\"Marcar una canci\u00f3n como favorita\") @ns.expect(favorito_input) @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") @ns.marshal_with(favorito_model) def post(self): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" data = request.json usuario = Usuario.query.get(data[\"id_usuario\"]) cancion = Cancion.query.get(data[\"id_cancion\"]) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito_existente = Favorito.query.filter_by( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ).first() if favorito_existente: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ) try: db.session.add(favorito) db.session.commit() return favorito, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")","title":"UsuarioListAPI"},{"location":"resources/#musica_api.resources.UsuarioListAPI.get","text":"Obtiene todos los usuarios registrados (paginados) Source code in musica_api\\resources.py @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200","title":"get"},{"location":"resources/#musica_api.resources.UsuarioListAPI.post","text":"Marca una canci\u00f3n como favorita para un usuario Source code in musica_api\\resources.py @ns.doc(\"Marcar una canci\u00f3n como favorita\") @ns.expect(favorito_input) @ns.response(201, \"Canci\u00f3n marcada como favorita\") @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\") @ns.response(404, \"Usuario o canci\u00f3n no encontrada\") @ns.marshal_with(favorito_model) def post(self): \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\" data = request.json usuario = Usuario.query.get(data[\"id_usuario\"]) cancion = Cancion.query.get(data[\"id_cancion\"]) if not usuario: ns.abort(404, \"Usuario no encontrado\") if not cancion: ns.abort(404, \"Canci\u00f3n no encontrada\") favorito_existente = Favorito.query.filter_by( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ).first() if favorito_existente: ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\") favorito = Favorito( id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"] ) try: db.session.add(favorito) db.session.commit() return favorito, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")","title":"post"},{"location":"resources/#musica_api.resources.get","text":"Obtiene todos los usuarios registrados (paginados) Source code in musica_api\\resources.py @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\") @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\") @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\") @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\") @ns.marshal_list_with(usuario_model) def get(self): \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\" page = int(request.args.get(\"page\", 1)) per_page = int(request.args.get(\"per_page\", 4)) usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False) return usuarios.items, 200 @ns.doc(\"Crear un nuevo usuario\") @ns.expect(usuario_base) @ns.response(201, \"Usuario creado con \u00e9xito\") @ns.response(400, \"Datos inv\u00e1lidos o correo ya existe\") @ns.marshal_with(usuario_model) def post(self): \"\"\"Crea un nuevo usuario\"\"\" data = request.json if Usuario.query.filter_by(correo=data[\"correo\"]).first(): ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\") usuario = Usuario(nombre=data[\"nombre\"], correo=data[\"correo\"]) try: db.session.add(usuario) db.session.commit() return usuario, 201 except Exception as e: db.session.rollback() ns.abort(400, f\"Error al crear usuario: {str(e)}\")","title":"get"},{"location":"utils/","text":"M\u00f3dulo de utilidades para la aplicaci\u00f3n. M\u00f3dulo de utilidades para la aplicaci\u00f3n. Contiene funciones auxiliares utilizadas en diferentes partes de la aplicaci\u00f3n. formatear_duracion(segundos) Convierte una duraci\u00f3n en segundos a formato mm:ss. Parameters: Name Type Description Default segundos int Duraci\u00f3n en segundos required Returns: Name Type Description str Duraci\u00f3n formateada como mm:ss Source code in utils.py def formatear_duracion(segundos): \"\"\" Convierte una duraci\u00f3n en segundos a formato mm:ss. Args: segundos (int): Duraci\u00f3n en segundos Returns: str: Duraci\u00f3n formateada como mm:ss \"\"\" minutos = segundos // 60 segundos_restantes = segundos % 60 return f\"{minutos:02}:{segundos_restantes:02}\" generar_slug(texto) Genera un slug a partir de un texto. Un slug es una versi\u00f3n de texto amigable para URLs. Parameters: Name Type Description Default texto str Texto a convertir en slug required Returns: Name Type Description str Slug generado Source code in utils.py def generar_slug(texto): \"\"\" Genera un slug a partir de un texto. Un slug es una versi\u00f3n de texto amigable para URLs. Args: texto (str): Texto a convertir en slug Returns: str: Slug generado \"\"\" slug = texto.lower() # Convertir a min\u00fasculas slug = re.sub(r\"\\s+\", \"-\", slug) # Reemplazar espacios con guiones slug = re.sub(r\"[^a-z0-9\\-]\", \"\", slug) # Eliminar caracteres no alfanum\u00e9ricos slug = re.sub(r\"-{2,}\", \"-\", slug) # Reemplazar m\u00faltiples guiones con uno solo slug = slug.strip(\"-\") # Eliminar guiones al inicio y final return slug obtener_a\u00f1o_actual() Obtiene el a\u00f1o actual. Returns: Name Type Description int A\u00f1o actual Source code in utils.py def obtener_a\u00f1o_actual(): \"\"\" Obtiene el a\u00f1o actual. Returns: int: A\u00f1o actual \"\"\" return datetime.now().year validar_a\u00f1o(a\u00f1o) Valida que un a\u00f1o sea v\u00e1lido (no futuro y no muy antiguo). Parameters: Name Type Description Default a\u00f1o int A\u00f1o a validar required Returns: Name Type Description bool True si el a\u00f1o es v\u00e1lido, False en caso contrario Source code in utils.py def validar_a\u00f1o(a\u00f1o): \"\"\" Valida que un a\u00f1o sea v\u00e1lido (no futuro y no muy antiguo). Args: a\u00f1o (int): A\u00f1o a validar Returns: bool: True si el a\u00f1o es v\u00e1lido, False en caso contrario \"\"\" a\u00f1o_actual = obtener_a\u00f1o_actual() return isinstance(a\u00f1o, int) and 1900 <= a\u00f1o <= a\u00f1o_actual validar_correo(correo) Valida que un correo electr\u00f3nico tenga un formato v\u00e1lido. Parameters: Name Type Description Default correo str Correo electr\u00f3nico a validar required Returns: Name Type Description bool True si el correo es v\u00e1lido, False en caso contrario Source code in utils.py def validar_correo(correo): \"\"\" Valida que un correo electr\u00f3nico tenga un formato v\u00e1lido. Args: correo (str): Correo electr\u00f3nico a validar Returns: bool: True si el correo es v\u00e1lido, False en caso contrario \"\"\" # Expresi\u00f3n regular para validar correos electr\u00f3nicos patron = r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\" return bool(re.match(patron, correo))","title":"Utilidades"},{"location":"utils/#modulo-de-utilidades-para-la-aplicacion","text":"M\u00f3dulo de utilidades para la aplicaci\u00f3n. Contiene funciones auxiliares utilizadas en diferentes partes de la aplicaci\u00f3n.","title":"M\u00f3dulo de utilidades para la aplicaci\u00f3n."},{"location":"utils/#utils.formatear_duracion","text":"Convierte una duraci\u00f3n en segundos a formato mm:ss. Parameters: Name Type Description Default segundos int Duraci\u00f3n en segundos required Returns: Name Type Description str Duraci\u00f3n formateada como mm:ss Source code in utils.py def formatear_duracion(segundos): \"\"\" Convierte una duraci\u00f3n en segundos a formato mm:ss. Args: segundos (int): Duraci\u00f3n en segundos Returns: str: Duraci\u00f3n formateada como mm:ss \"\"\" minutos = segundos // 60 segundos_restantes = segundos % 60 return f\"{minutos:02}:{segundos_restantes:02}\"","title":"formatear_duracion"},{"location":"utils/#utils.generar_slug","text":"Genera un slug a partir de un texto. Un slug es una versi\u00f3n de texto amigable para URLs. Parameters: Name Type Description Default texto str Texto a convertir en slug required Returns: Name Type Description str Slug generado Source code in utils.py def generar_slug(texto): \"\"\" Genera un slug a partir de un texto. Un slug es una versi\u00f3n de texto amigable para URLs. Args: texto (str): Texto a convertir en slug Returns: str: Slug generado \"\"\" slug = texto.lower() # Convertir a min\u00fasculas slug = re.sub(r\"\\s+\", \"-\", slug) # Reemplazar espacios con guiones slug = re.sub(r\"[^a-z0-9\\-]\", \"\", slug) # Eliminar caracteres no alfanum\u00e9ricos slug = re.sub(r\"-{2,}\", \"-\", slug) # Reemplazar m\u00faltiples guiones con uno solo slug = slug.strip(\"-\") # Eliminar guiones al inicio y final return slug","title":"generar_slug"},{"location":"utils/#utils.obtener_a\u00f1o_actual","text":"Obtiene el a\u00f1o actual. Returns: Name Type Description int A\u00f1o actual Source code in utils.py def obtener_a\u00f1o_actual(): \"\"\" Obtiene el a\u00f1o actual. Returns: int: A\u00f1o actual \"\"\" return datetime.now().year","title":"obtener_a\u00f1o_actual"},{"location":"utils/#utils.validar_a\u00f1o","text":"Valida que un a\u00f1o sea v\u00e1lido (no futuro y no muy antiguo). Parameters: Name Type Description Default a\u00f1o int A\u00f1o a validar required Returns: Name Type Description bool True si el a\u00f1o es v\u00e1lido, False en caso contrario Source code in utils.py def validar_a\u00f1o(a\u00f1o): \"\"\" Valida que un a\u00f1o sea v\u00e1lido (no futuro y no muy antiguo). Args: a\u00f1o (int): A\u00f1o a validar Returns: bool: True si el a\u00f1o es v\u00e1lido, False en caso contrario \"\"\" a\u00f1o_actual = obtener_a\u00f1o_actual() return isinstance(a\u00f1o, int) and 1900 <= a\u00f1o <= a\u00f1o_actual","title":"validar_a\u00f1o"},{"location":"utils/#utils.validar_correo","text":"Valida que un correo electr\u00f3nico tenga un formato v\u00e1lido. Parameters: Name Type Description Default correo str Correo electr\u00f3nico a validar required Returns: Name Type Description bool True si el correo es v\u00e1lido, False en caso contrario Source code in utils.py def validar_correo(correo): \"\"\" Valida que un correo electr\u00f3nico tenga un formato v\u00e1lido. Args: correo (str): Correo electr\u00f3nico a validar Returns: bool: True si el correo es v\u00e1lido, False en caso contrario \"\"\" # Expresi\u00f3n regular para validar correos electr\u00f3nicos patron = r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\" return bool(re.match(patron, correo))","title":"validar_correo"}]}