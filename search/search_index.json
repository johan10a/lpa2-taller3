{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api_models.html","title":"M\u00f3dulo de modelos de API para la serializaci\u00f3n/deserializaci\u00f3n de datos.","text":"<p>M\u00f3dulo de modelos de API para la serializaci\u00f3n/deserializaci\u00f3n de datos. Define los esquemas utilizados por Flask-RESTX para la documentaci\u00f3n y validaci\u00f3n.</p>"},{"location":"app.html","title":"Script principal para ejecutar la aplicaci\u00f3n Flask.","text":"<p>Script principal para ejecutar la aplicaci\u00f3n Flask.</p>"},{"location":"config.html","title":"M\u00f3dulo de configuraci\u00f3n de la aplicaci\u00f3n.","text":"<p>M\u00f3dulo de configuraci\u00f3n de la aplicaci\u00f3n. Define las diferentes configuraciones para entornos de desarrollo, pruebas y producci\u00f3n.</p>"},{"location":"config.html#musica_api.config.Config","title":"<code>Config</code>","text":"<p>Configuraci\u00f3n base para la aplicaci\u00f3n.</p> Source code in <code>musica_api\\config.py</code> <pre><code>class Config:\n    \"\"\"Configuraci\u00f3n base para la aplicaci\u00f3n.\"\"\"\n\n    # Configuraci\u00f3n de la base de datos\n    # Corregido: se a\u00f1ade sqlite'\n    SQLALCHEMY_DATABASE_URI = os.getenv(\n        \"SQLALCHEMY_DATABASE_URI\", \"sqlite:///Users/Admin/Public/musica.db\"\n    )\n    SQLALCHEMY_TRACK_MODIFICATIONS = (\n        os.getenv(\"SQLALCHEMY_TRACK_MODIFICATIONS\", \"False\").lower() == \"true\"\n    )\n\n    # Configuraci\u00f3n de la API\n    API_TITLE = os.getenv(\"API_TITLE\", \"API de M\u00fasica\")\n    API_VERSION = os.getenv(\"API_VERSION\", \"1.0\")\n\n    # Otras configuraciones generales\n    SECRET_KEY = os.getenv(\"SECRET_KEY\", \"clave-secreta-predeterminada\")\n</code></pre>"},{"location":"config.html#musica_api.config.DevelopmentConfig","title":"<code>DevelopmentConfig</code>","text":"<p>               Bases: <code>Config</code></p> <p>Configuraci\u00f3n para entorno de desarrollo.</p> Source code in <code>musica_api\\config.py</code> <pre><code>class DevelopmentConfig(Config):\n    \"\"\"Configuraci\u00f3n para entorno de desarrollo.\"\"\"\n\n    DEBUG = True\n</code></pre>"},{"location":"config.html#musica_api.config.ProductionConfig","title":"<code>ProductionConfig</code>","text":"<p>               Bases: <code>Config</code></p> <p>Configuraci\u00f3n para entorno de producci\u00f3n.</p> Source code in <code>musica_api\\config.py</code> <pre><code>class ProductionConfig(Config):\n    \"\"\"Configuraci\u00f3n para entorno de producci\u00f3n.\"\"\"\n\n    DEBUG = False\n    # En producci\u00f3n, asegurarse de tener una clave secreta fuerte\n    SECRET_KEY = os.getenv(\"SECRET_KEY\")\n</code></pre>"},{"location":"config.html#musica_api.config.TestingConfig","title":"<code>TestingConfig</code>","text":"<p>               Bases: <code>Config</code></p> <p>Configuraci\u00f3n para entorno de pruebas.</p> Source code in <code>musica_api\\config.py</code> <pre><code>class TestingConfig(Config):\n    \"\"\"Configuraci\u00f3n para entorno de pruebas.\"\"\"\n\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///musica_test.db\"\n</code></pre>"},{"location":"config.html#musica_api.config.get_config","title":"<code>get_config(env=None)</code>","text":"<p>Obtiene la configuraci\u00f3n seg\u00fan el entorno especificado en las variables de entorno o directamente por par\u00e1metro.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>str</code> <p>Nombre del entorno. Si es None, se usa FLASK_ENV.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>object</code> <p>Clase de configuraci\u00f3n seg\u00fan el entorno.</p> Source code in <code>musica_api\\config.py</code> <pre><code>def get_config(env=None):\n    \"\"\"\n    Obtiene la configuraci\u00f3n seg\u00fan el entorno especificado en las variables de entorno\n    o directamente por par\u00e1metro.\n\n    Args:\n        env (str, optional): Nombre del entorno. Si es None, se usa FLASK_ENV.\n\n    Returns:\n        object: Clase de configuraci\u00f3n seg\u00fan el entorno.\n    \"\"\"\n    if env is None:\n        env = os.getenv(\"FLASK_ENV\", \"development\")\n    return config_by_name.get(env, config_by_name[\"default\"])\n</code></pre>"},{"location":"extensions.html","title":"M\u00f3dulo extensiones para la aplicaci\u00f3n Flask.","text":"<p>M\u00f3dulo de extensiones para la aplicaci\u00f3n Flask. Define las instancias de las extensiones utilizadas en todo el proyecto.</p>"},{"location":"models.html","title":"M\u00f3dulo de modelos de datos","text":"<p>M\u00f3dulo de recursos de la API. Define los endpoints, controladores y la l\u00f3gica de negocio de la API.</p>"},{"location":"models.html#musica_api.resources.CancionAPI","title":"<code>CancionAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/canciones/&lt;int:id&gt;\")\n@ns.param(\"id\", \"Identificador \u00fanico de la canci\u00f3n\")\n@ns.response(404, \"Canci\u00f3n no encontrada\")\nclass CancionAPI(Resource):\n    @ns.doc(\"Obtener una canci\u00f3n por su ID\")\n    @ns.marshal_with(cancion_model)\n    def get(self, id):\n        \"\"\"Obtiene una canci\u00f3n por su ID\"\"\"\n        return Cancion.query.get_or_404(id), 200\n\n    @ns.doc(\"Actualizar una canci\u00f3n\")\n    @ns.expect(cancion_base)\n    @ns.marshal_with(cancion_model)\n    def put(self, id):\n        \"\"\"Actualiza una canci\u00f3n existente\"\"\"\n        cancion = Cancion.query.get_or_404(id)\n        data = request.json\n\n        cancion.titulo = data.get(\"titulo\", cancion.titulo)\n        cancion.artista = data.get(\"artista\", cancion.artista)\n        cancion.album = data.get(\"album\", cancion.album)\n        cancion.duracion = data.get(\"duracion\", cancion.duracion)\n        cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o)\n        cancion.genero = data.get(\"genero\", cancion.genero)\n\n        try:\n            db.session.commit()\n            return cancion\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\")\n\n    @ns.doc(\"Eliminar una canci\u00f3n\")\n    @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\")\n    def delete(self, id):\n        \"\"\"Elimina una canci\u00f3n existente\"\"\"\n        cancion = Cancion.query.get_or_404(id)\n        try:\n            db.session.delete(cancion)\n            db.session.commit()\n            return {}, 204\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.CancionAPI.delete","title":"<code>delete(id)</code>","text":"<p>Elimina una canci\u00f3n existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Eliminar una canci\u00f3n\")\n@ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\")\ndef delete(self, id):\n    \"\"\"Elimina una canci\u00f3n existente\"\"\"\n    cancion = Cancion.query.get_or_404(id)\n    try:\n        db.session.delete(cancion)\n        db.session.commit()\n        return {}, 204\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.CancionAPI.get","title":"<code>get(id)</code>","text":"<p>Obtiene una canci\u00f3n por su ID</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Obtener una canci\u00f3n por su ID\")\n@ns.marshal_with(cancion_model)\ndef get(self, id):\n    \"\"\"Obtiene una canci\u00f3n por su ID\"\"\"\n    return Cancion.query.get_or_404(id), 200\n</code></pre>"},{"location":"models.html#musica_api.resources.CancionAPI.put","title":"<code>put(id)</code>","text":"<p>Actualiza una canci\u00f3n existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Actualizar una canci\u00f3n\")\n@ns.expect(cancion_base)\n@ns.marshal_with(cancion_model)\ndef put(self, id):\n    \"\"\"Actualiza una canci\u00f3n existente\"\"\"\n    cancion = Cancion.query.get_or_404(id)\n    data = request.json\n\n    cancion.titulo = data.get(\"titulo\", cancion.titulo)\n    cancion.artista = data.get(\"artista\", cancion.artista)\n    cancion.album = data.get(\"album\", cancion.album)\n    cancion.duracion = data.get(\"duracion\", cancion.duracion)\n    cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o)\n    cancion.genero = data.get(\"genero\", cancion.genero)\n\n    try:\n        db.session.commit()\n        return cancion\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.CancionBusquedaAPI","title":"<code>CancionBusquedaAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/canciones/buscar\")\nclass CancionBusquedaAPI(Resource):\n    @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\")\n    @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\")\n    @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\")\n    @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\")\n    @ns.marshal_list_with(cancion_model)\n    def get(self):\n        \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\"\n        titulo = request.args.get(\"titulo\")\n        artista = request.args.get(\"artista\")\n        genero = request.args.get(\"genero\")\n\n        query = Cancion.query\n\n        if titulo:\n            query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\"))\n        if artista:\n            query = query.filter(Cancion.artista.ilike(f\"%{artista}%\"))\n        if genero:\n            query = query.filter(Cancion.genero == genero)\n\n        return query.all(), 200\n</code></pre>"},{"location":"models.html#musica_api.resources.CancionBusquedaAPI.get","title":"<code>get()</code>","text":"<p>Busca canciones por t\u00edtulo, artista o g\u00e9nero</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\")\n@ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\")\n@ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\")\n@ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\")\n@ns.marshal_list_with(cancion_model)\ndef get(self):\n    \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\"\n    titulo = request.args.get(\"titulo\")\n    artista = request.args.get(\"artista\")\n    genero = request.args.get(\"genero\")\n\n    query = Cancion.query\n\n    if titulo:\n        query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\"))\n    if artista:\n        query = query.filter(Cancion.artista.ilike(f\"%{artista}%\"))\n    if genero:\n        query = query.filter(Cancion.genero == genero)\n\n    return query.all(), 200\n</code></pre>"},{"location":"models.html#musica_api.resources.CancionListAPI","title":"<code>CancionListAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/canciones\")\nclass CancionListAPI(Resource):\n    @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\")\n    @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n    @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n    @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\")\n    @ns.marshal_list_with(cancion_model)\n    def get(self):\n        \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\"\n        page = int(request.args.get(\"page\", 1))\n        per_page = int(request.args.get(\"per_page\", 4))\n\n        canciones = Cancion.query.paginate(\n            page=page, per_page=per_page, error_out=False\n        )\n        return canciones.items, 200\n\n    @ns.doc(\"Crear una nueva canci\u00f3n\")\n    @ns.expect(cancion_base)\n    @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\")\n    @ns.marshal_with(cancion_model)\n    def post(self):\n        \"\"\"Crea una nueva canci\u00f3n\"\"\"\n        data = request.json\n\n        cancion = Cancion(\n            titulo=data[\"titulo\"],\n            artista=data[\"artista\"],\n            album=data.get(\"album\"),\n            duracion=data.get(\"duracion\"),\n            a\u00f1o=data.get(\"a\u00f1o\"),\n            genero=data.get(\"genero\"),\n        )\n\n        try:\n            db.session.add(cancion)\n            db.session.commit()\n            return cancion, 201\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.CancionListAPI.get","title":"<code>get()</code>","text":"<p>Obtiene todas las canciones registradas (paginadas)</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Listar todas las canciones con paginaci\u00f3n\")\n@ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n@ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n@ns.response(200, \"Lista de canciones obtenida con \u00e9xito\")\n@ns.marshal_list_with(cancion_model)\ndef get(self):\n    \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\"\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"per_page\", 4))\n\n    canciones = Cancion.query.paginate(\n        page=page, per_page=per_page, error_out=False\n    )\n    return canciones.items, 200\n</code></pre>"},{"location":"models.html#musica_api.resources.CancionListAPI.post","title":"<code>post()</code>","text":"<p>Crea una nueva canci\u00f3n</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Crear una nueva canci\u00f3n\")\n@ns.expect(cancion_base)\n@ns.response(201, \"Canci\u00f3n creada con \u00e9xito\")\n@ns.marshal_with(cancion_model)\ndef post(self):\n    \"\"\"Crea una nueva canci\u00f3n\"\"\"\n    data = request.json\n\n    cancion = Cancion(\n        titulo=data[\"titulo\"],\n        artista=data[\"artista\"],\n        album=data.get(\"album\"),\n        duracion=data.get(\"duracion\"),\n        a\u00f1o=data.get(\"a\u00f1o\"),\n        genero=data.get(\"genero\"),\n    )\n\n    try:\n        db.session.add(cancion)\n        db.session.commit()\n        return cancion, 201\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.FavoritoAPI","title":"<code>FavoritoAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/favoritos/&lt;int:id&gt;\")\n@ns.param(\"id\", \"Identificador \u00fanico del favorito\")\n@ns.response(404, \"Favorito no encontrado\")\nclass FavoritoAPI(Resource):\n    @ns.doc(\"Obtener un favorito por su ID\")\n    @ns.marshal_with(favorito_model)\n    def get(self, id):\n        \"\"\"Obtiene un registro de favorito por su ID\"\"\"\n        return Favorito.query.get_or_404(id), 200\n\n    @ns.doc(\"Eliminar un favorito\")\n    @ns.response(204, \"Favorito eliminado con \u00e9xito\")\n    def delete(self, id):\n        \"\"\"Elimina un registro de favorito existente\"\"\"\n        favorito = Favorito.query.get_or_404(id)\n        try:\n            db.session.delete(favorito)\n            db.session.commit()\n            return {}, 204\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.FavoritoAPI.delete","title":"<code>delete(id)</code>","text":"<p>Elimina un registro de favorito existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Eliminar un favorito\")\n@ns.response(204, \"Favorito eliminado con \u00e9xito\")\ndef delete(self, id):\n    \"\"\"Elimina un registro de favorito existente\"\"\"\n    favorito = Favorito.query.get_or_404(id)\n    try:\n        db.session.delete(favorito)\n        db.session.commit()\n        return {}, 204\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.FavoritoAPI.get","title":"<code>get(id)</code>","text":"<p>Obtiene un registro de favorito por su ID</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Obtener un favorito por su ID\")\n@ns.marshal_with(favorito_model)\ndef get(self, id):\n    \"\"\"Obtiene un registro de favorito por su ID\"\"\"\n    return Favorito.query.get_or_404(id), 200\n</code></pre>"},{"location":"models.html#musica_api.resources.Home","title":"<code>Home</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/\")\nclass Home(Resource):\n    @ns.doc(\"P\u00e1gina principal de la API\")\n    @ns.marshal_with(mensaje_model)\n    def get(self):\n        \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\"\n        return {\n            \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\"\n        }, 200\n</code></pre>"},{"location":"models.html#musica_api.resources.Home.get","title":"<code>get()</code>","text":"<p>Mensaje de bienvenida en la ra\u00edz de la API</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"P\u00e1gina principal de la API\")\n@ns.marshal_with(mensaje_model)\ndef get(self):\n    \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\"\n    return {\n        \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\"\n    }, 200\n</code></pre>"},{"location":"models.html#musica_api.resources.Ping","title":"<code>Ping</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/ping\")\nclass Ping(Resource):\n    @ns.response(200, \"API funcionando correctamente\")\n    @ns.marshal_with(mensaje_model)\n    def get(self):\n        \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\"\n        return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200\n</code></pre>"},{"location":"models.html#musica_api.resources.Ping.get","title":"<code>get()</code>","text":"<p>Endpoint para verificar que la API est\u00e1 funcionando</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.response(200, \"API funcionando correctamente\")\n@ns.marshal_with(mensaje_model)\ndef get(self):\n    \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\"\n    return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioAPI","title":"<code>UsuarioAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/usuarios/&lt;int:id&gt;\")\n@ns.param(\"id\", \"Identificador \u00fanico del usuario\")\n@ns.response(404, \"Usuario no encontrado\")\nclass UsuarioAPI(Resource):\n    @ns.doc(\"Obtener un usuario por su ID\")\n    @ns.marshal_with(usuario_model)\n    def get(self, id):\n        \"\"\"Obtiene un usuario por su ID\"\"\"\n        return Usuario.query.get_or_404(id), 200\n\n    @ns.doc(\"Actualizar un usuario\")\n    @ns.expect(usuario_base)\n    @ns.marshal_with(usuario_model)\n    def put(self, id):\n        \"\"\"Actualiza un usuario existente\"\"\"\n        usuario = Usuario.query.get_or_404(id)\n        data = request.json\n\n        if \"correo\" in data and data[\"correo\"] != usuario.correo:\n            if Usuario.query.filter_by(correo=data[\"correo\"]).first():\n                ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\")\n\n        usuario.nombre = data.get(\"nombre\", usuario.nombre)\n        usuario.correo = data.get(\"correo\", usuario.correo)\n\n        try:\n            db.session.commit()\n            return usuario\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al actualizar usuario: {str(e)}\")\n\n    @ns.doc(\"Eliminar un usuario\")\n    @ns.response(204, \"Usuario eliminado con \u00e9xito\")\n    def delete(self, id):\n        \"\"\"Elimina un usuario existente\"\"\"\n        usuario = Usuario.query.get_or_404(id)\n        try:\n            db.session.delete(usuario)\n            db.session.commit()\n            return {}, 204\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al eliminar usuario: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioAPI.delete","title":"<code>delete(id)</code>","text":"<p>Elimina un usuario existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Eliminar un usuario\")\n@ns.response(204, \"Usuario eliminado con \u00e9xito\")\ndef delete(self, id):\n    \"\"\"Elimina un usuario existente\"\"\"\n    usuario = Usuario.query.get_or_404(id)\n    try:\n        db.session.delete(usuario)\n        db.session.commit()\n        return {}, 204\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al eliminar usuario: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioAPI.get","title":"<code>get(id)</code>","text":"<p>Obtiene un usuario por su ID</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Obtener un usuario por su ID\")\n@ns.marshal_with(usuario_model)\ndef get(self, id):\n    \"\"\"Obtiene un usuario por su ID\"\"\"\n    return Usuario.query.get_or_404(id), 200\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioAPI.put","title":"<code>put(id)</code>","text":"<p>Actualiza un usuario existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Actualizar un usuario\")\n@ns.expect(usuario_base)\n@ns.marshal_with(usuario_model)\ndef put(self, id):\n    \"\"\"Actualiza un usuario existente\"\"\"\n    usuario = Usuario.query.get_or_404(id)\n    data = request.json\n\n    if \"correo\" in data and data[\"correo\"] != usuario.correo:\n        if Usuario.query.filter_by(correo=data[\"correo\"]).first():\n            ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\")\n\n    usuario.nombre = data.get(\"nombre\", usuario.nombre)\n    usuario.correo = data.get(\"correo\", usuario.correo)\n\n    try:\n        db.session.commit()\n        return usuario\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al actualizar usuario: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioCancionFavoritoAPI","title":"<code>UsuarioCancionFavoritoAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/usuarios/&lt;int:id_usuario&gt;/favoritos/&lt;int:id_cancion&gt;\")\n@ns.param(\"id_usuario\", \"Identificador \u00fanico del usuario\")\n@ns.param(\"id_cancion\", \"Identificador \u00fanico de la canci\u00f3n\")\nclass UsuarioCancionFavoritoAPI(Resource):\n    @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\")\n    @ns.response(201, \"Canci\u00f3n marcada como favorita\")\n    @ns.response(204, \"Canci\u00f3n desmarcada como favorita\")\n    @ns.response(404, \"Usuario o canci\u00f3n no encontrada\")\n    def post(self, id_usuario, id_cancion):\n        \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\"\n        usuario = Usuario.query.get(id_usuario)\n        cancion = Cancion.query.get(id_cancion)\n\n        if not usuario:\n            ns.abort(404, \"Usuario no encontrado\")\n        if not cancion:\n            ns.abort(404, \"Canci\u00f3n no encontrada\")\n\n        favorito = Favorito.query.filter_by(\n            id_usuario=id_usuario, id_cancion=id_cancion\n        ).first()\n\n        if favorito:\n            ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\")\n\n        favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion)\n\n        try:\n            db.session.add(favorito)\n            db.session.commit()\n            return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")\n\n    @ns.doc(\"Eliminar una canci\u00f3n de favoritos\")\n    @ns.response(204, \"Canci\u00f3n eliminada de favoritos\")\n    @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\")\n    def delete(self, id_usuario, id_cancion):\n        \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\"\n        favorito = Favorito.query.filter_by(\n            id_usuario=id_usuario, id_cancion=id_cancion\n        ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\")\n\n        try:\n            db.session.delete(favorito)\n            db.session.commit()\n            return {}, 204\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioCancionFavoritoAPI.delete","title":"<code>delete(id_usuario, id_cancion)</code>","text":"<p>Elimina una canci\u00f3n de favoritos para un usuario</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Eliminar una canci\u00f3n de favoritos\")\n@ns.response(204, \"Canci\u00f3n eliminada de favoritos\")\n@ns.response(404, \"Relaci\u00f3n de favorito no encontrada\")\ndef delete(self, id_usuario, id_cancion):\n    \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\"\n    favorito = Favorito.query.filter_by(\n        id_usuario=id_usuario, id_cancion=id_cancion\n    ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\")\n\n    try:\n        db.session.delete(favorito)\n        db.session.commit()\n        return {}, 204\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioCancionFavoritoAPI.post","title":"<code>post(id_usuario, id_cancion)</code>","text":"<p>Marca una canci\u00f3n como favorita para un usuario</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\")\n@ns.response(201, \"Canci\u00f3n marcada como favorita\")\n@ns.response(204, \"Canci\u00f3n desmarcada como favorita\")\n@ns.response(404, \"Usuario o canci\u00f3n no encontrada\")\ndef post(self, id_usuario, id_cancion):\n    \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\"\n    usuario = Usuario.query.get(id_usuario)\n    cancion = Cancion.query.get(id_cancion)\n\n    if not usuario:\n        ns.abort(404, \"Usuario no encontrado\")\n    if not cancion:\n        ns.abort(404, \"Canci\u00f3n no encontrada\")\n\n    favorito = Favorito.query.filter_by(\n        id_usuario=id_usuario, id_cancion=id_cancion\n    ).first()\n\n    if favorito:\n        ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\")\n\n    favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion)\n\n    try:\n        db.session.add(favorito)\n        db.session.commit()\n        return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioFavoritosAPI","title":"<code>UsuarioFavoritosAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/usuarios/&lt;int:id&gt;/favoritos\")\n@ns.param(\"id\", \"Identificador \u00fanico del usuario\")\n@ns.response(404, \"Usuario no encontrado\")\nclass UsuarioFavoritosAPI(Resource):\n    @ns.doc(\"Obtener las canciones favoritas de un usuario\")\n    @ns.marshal_with(favoritos_usuario_model)\n    def get(self, id):\n        \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\"\n        usuario = Usuario.query.get_or_404(id)\n\n        favoritos = Favorito.query.filter_by(id_usuario=id).all()\n        canciones_favoritas = [\n            {\n                \"id\": favorito.cancion.id,\n                \"titulo\": favorito.cancion.titulo,\n                \"artista\": favorito.cancion.artista,\n            }\n            for favorito in favoritos\n        ]\n\n        return {\n            \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre},\n            \"canciones_favoritas\": canciones_favoritas,\n        }, 200\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioFavoritosAPI.get","title":"<code>get(id)</code>","text":"<p>Obtiene todas las canciones favoritas de un usuario</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Obtener las canciones favoritas de un usuario\")\n@ns.marshal_with(favoritos_usuario_model)\ndef get(self, id):\n    \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\"\n    usuario = Usuario.query.get_or_404(id)\n\n    favoritos = Favorito.query.filter_by(id_usuario=id).all()\n    canciones_favoritas = [\n        {\n            \"id\": favorito.cancion.id,\n            \"titulo\": favorito.cancion.titulo,\n            \"artista\": favorito.cancion.artista,\n        }\n        for favorito in favoritos\n    ]\n\n    return {\n        \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre},\n        \"canciones_favoritas\": canciones_favoritas,\n    }, 200\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioListAPI","title":"<code>UsuarioListAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/usuarios\")\nclass UsuarioListAPI(Resource):\n    @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\")\n    @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n    @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n    @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\")\n    @ns.marshal_list_with(usuario_model)\n    def get(self):\n        \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\"\n        page = int(request.args.get(\"page\", 1))\n        per_page = int(request.args.get(\"per_page\", 4))\n        usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False)\n        return usuarios.items, 200\n\n    @ns.doc(\"Marcar una canci\u00f3n como favorita\")\n    @ns.expect(favorito_input)\n    @ns.response(201, \"Canci\u00f3n marcada como favorita\")\n    @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\")\n    @ns.response(404, \"Usuario o canci\u00f3n no encontrada\")\n    @ns.marshal_with(favorito_model)\n    def post(self):\n        \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\"\n        data = request.json\n\n        usuario = Usuario.query.get(data[\"id_usuario\"])\n        cancion = Cancion.query.get(data[\"id_cancion\"])\n\n        if not usuario:\n            ns.abort(404, \"Usuario no encontrado\")\n        if not cancion:\n            ns.abort(404, \"Canci\u00f3n no encontrada\")\n\n        favorito_existente = Favorito.query.filter_by(\n            id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"]\n        ).first()\n\n        if favorito_existente:\n            ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\")\n\n        favorito = Favorito(\n            id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"]\n        )\n\n        try:\n            db.session.add(favorito)\n            db.session.commit()\n            return favorito, 201\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioListAPI.get","title":"<code>get()</code>","text":"<p>Obtiene todos los usuarios registrados (paginados)</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\")\n@ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n@ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n@ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\")\n@ns.marshal_list_with(usuario_model)\ndef get(self):\n    \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\"\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"per_page\", 4))\n    usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False)\n    return usuarios.items, 200\n</code></pre>"},{"location":"models.html#musica_api.resources.UsuarioListAPI.post","title":"<code>post()</code>","text":"<p>Marca una canci\u00f3n como favorita para un usuario</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Marcar una canci\u00f3n como favorita\")\n@ns.expect(favorito_input)\n@ns.response(201, \"Canci\u00f3n marcada como favorita\")\n@ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\")\n@ns.response(404, \"Usuario o canci\u00f3n no encontrada\")\n@ns.marshal_with(favorito_model)\ndef post(self):\n    \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\"\n    data = request.json\n\n    usuario = Usuario.query.get(data[\"id_usuario\"])\n    cancion = Cancion.query.get(data[\"id_cancion\"])\n\n    if not usuario:\n        ns.abort(404, \"Usuario no encontrado\")\n    if not cancion:\n        ns.abort(404, \"Canci\u00f3n no encontrada\")\n\n    favorito_existente = Favorito.query.filter_by(\n        id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"]\n    ).first()\n\n    if favorito_existente:\n        ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\")\n\n    favorito = Favorito(\n        id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"]\n    )\n\n    try:\n        db.session.add(favorito)\n        db.session.commit()\n        return favorito, 201\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")\n</code></pre>"},{"location":"models.html#musica_api.resources.get","title":"<code>get(self)</code>","text":"<p>Obtiene todos los usuarios registrados (paginados)</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\")\n@ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n@ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n@ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\")\n@ns.marshal_list_with(usuario_model)\ndef get(self):\n    \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\"\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"per_page\", 4))\n\n    usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False)\n    return usuarios.items, 200\n\n    @ns.doc(\"Crear un nuevo usuario\")\n    @ns.expect(usuario_base)\n    @ns.response(201, \"Usuario creado con \u00e9xito\")\n    @ns.response(400, \"Datos inv\u00e1lidos o correo ya existe\")\n    @ns.marshal_with(usuario_model)\n    def post(self):\n        \"\"\"Crea un nuevo usuario\"\"\"\n        data = request.json\n\n        if Usuario.query.filter_by(correo=data[\"correo\"]).first():\n            ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\")\n\n        usuario = Usuario(nombre=data[\"nombre\"], correo=data[\"correo\"])\n\n        try:\n            db.session.add(usuario)\n            db.session.commit()\n            return usuario, 201\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al crear usuario: {str(e)}\")\n</code></pre>"},{"location":"resources.html","title":"M\u00f3dulo recursos","text":"<p>M\u00f3dulo de recursos de la API. Define los endpoints, controladores y la l\u00f3gica de negocio de la API.</p>"},{"location":"resources.html#musica_api.resources.CancionAPI","title":"<code>CancionAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/canciones/&lt;int:id&gt;\")\n@ns.param(\"id\", \"Identificador \u00fanico de la canci\u00f3n\")\n@ns.response(404, \"Canci\u00f3n no encontrada\")\nclass CancionAPI(Resource):\n    @ns.doc(\"Obtener una canci\u00f3n por su ID\")\n    @ns.marshal_with(cancion_model)\n    def get(self, id):\n        \"\"\"Obtiene una canci\u00f3n por su ID\"\"\"\n        return Cancion.query.get_or_404(id), 200\n\n    @ns.doc(\"Actualizar una canci\u00f3n\")\n    @ns.expect(cancion_base)\n    @ns.marshal_with(cancion_model)\n    def put(self, id):\n        \"\"\"Actualiza una canci\u00f3n existente\"\"\"\n        cancion = Cancion.query.get_or_404(id)\n        data = request.json\n\n        cancion.titulo = data.get(\"titulo\", cancion.titulo)\n        cancion.artista = data.get(\"artista\", cancion.artista)\n        cancion.album = data.get(\"album\", cancion.album)\n        cancion.duracion = data.get(\"duracion\", cancion.duracion)\n        cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o)\n        cancion.genero = data.get(\"genero\", cancion.genero)\n\n        try:\n            db.session.commit()\n            return cancion\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\")\n\n    @ns.doc(\"Eliminar una canci\u00f3n\")\n    @ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\")\n    def delete(self, id):\n        \"\"\"Elimina una canci\u00f3n existente\"\"\"\n        cancion = Cancion.query.get_or_404(id)\n        try:\n            db.session.delete(cancion)\n            db.session.commit()\n            return {}, 204\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.CancionAPI.delete","title":"<code>delete(id)</code>","text":"<p>Elimina una canci\u00f3n existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Eliminar una canci\u00f3n\")\n@ns.response(204, \"Canci\u00f3n eliminada con \u00e9xito\")\ndef delete(self, id):\n    \"\"\"Elimina una canci\u00f3n existente\"\"\"\n    cancion = Cancion.query.get_or_404(id)\n    try:\n        db.session.delete(cancion)\n        db.session.commit()\n        return {}, 204\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al eliminar canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.CancionAPI.get","title":"<code>get(id)</code>","text":"<p>Obtiene una canci\u00f3n por su ID</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Obtener una canci\u00f3n por su ID\")\n@ns.marshal_with(cancion_model)\ndef get(self, id):\n    \"\"\"Obtiene una canci\u00f3n por su ID\"\"\"\n    return Cancion.query.get_or_404(id), 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.CancionAPI.put","title":"<code>put(id)</code>","text":"<p>Actualiza una canci\u00f3n existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Actualizar una canci\u00f3n\")\n@ns.expect(cancion_base)\n@ns.marshal_with(cancion_model)\ndef put(self, id):\n    \"\"\"Actualiza una canci\u00f3n existente\"\"\"\n    cancion = Cancion.query.get_or_404(id)\n    data = request.json\n\n    cancion.titulo = data.get(\"titulo\", cancion.titulo)\n    cancion.artista = data.get(\"artista\", cancion.artista)\n    cancion.album = data.get(\"album\", cancion.album)\n    cancion.duracion = data.get(\"duracion\", cancion.duracion)\n    cancion.a\u00f1o = data.get(\"a\u00f1o\", cancion.a\u00f1o)\n    cancion.genero = data.get(\"genero\", cancion.genero)\n\n    try:\n        db.session.commit()\n        return cancion\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al actualizar canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.CancionBusquedaAPI","title":"<code>CancionBusquedaAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/canciones/buscar\")\nclass CancionBusquedaAPI(Resource):\n    @ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\")\n    @ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\")\n    @ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\")\n    @ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\")\n    @ns.marshal_list_with(cancion_model)\n    def get(self):\n        \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\"\n        titulo = request.args.get(\"titulo\")\n        artista = request.args.get(\"artista\")\n        genero = request.args.get(\"genero\")\n\n        query = Cancion.query\n\n        if titulo:\n            query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\"))\n        if artista:\n            query = query.filter(Cancion.artista.ilike(f\"%{artista}%\"))\n        if genero:\n            query = query.filter(Cancion.genero == genero)\n\n        return query.all(), 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.CancionBusquedaAPI.get","title":"<code>get()</code>","text":"<p>Busca canciones por t\u00edtulo, artista o g\u00e9nero</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Buscar canciones por t\u00edtulo, artista o g\u00e9nero\")\n@ns.param(\"titulo\", \"T\u00edtulo de la canci\u00f3n (b\u00fasqueda parcial)\")\n@ns.param(\"artista\", \"Nombre del artista (b\u00fasqueda parcial)\")\n@ns.param(\"genero\", \"G\u00e9nero musical (b\u00fasqueda exacta)\")\n@ns.marshal_list_with(cancion_model)\ndef get(self):\n    \"\"\"Busca canciones por t\u00edtulo, artista o g\u00e9nero\"\"\"\n    titulo = request.args.get(\"titulo\")\n    artista = request.args.get(\"artista\")\n    genero = request.args.get(\"genero\")\n\n    query = Cancion.query\n\n    if titulo:\n        query = query.filter(Cancion.titulo.ilike(f\"%{titulo}%\"))\n    if artista:\n        query = query.filter(Cancion.artista.ilike(f\"%{artista}%\"))\n    if genero:\n        query = query.filter(Cancion.genero == genero)\n\n    return query.all(), 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.CancionListAPI","title":"<code>CancionListAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/canciones\")\nclass CancionListAPI(Resource):\n    @ns.doc(\"Listar todas las canciones con paginaci\u00f3n\")\n    @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n    @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n    @ns.response(200, \"Lista de canciones obtenida con \u00e9xito\")\n    @ns.marshal_list_with(cancion_model)\n    def get(self):\n        \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\"\n        page = int(request.args.get(\"page\", 1))\n        per_page = int(request.args.get(\"per_page\", 4))\n\n        canciones = Cancion.query.paginate(\n            page=page, per_page=per_page, error_out=False\n        )\n        return canciones.items, 200\n\n    @ns.doc(\"Crear una nueva canci\u00f3n\")\n    @ns.expect(cancion_base)\n    @ns.response(201, \"Canci\u00f3n creada con \u00e9xito\")\n    @ns.marshal_with(cancion_model)\n    def post(self):\n        \"\"\"Crea una nueva canci\u00f3n\"\"\"\n        data = request.json\n\n        cancion = Cancion(\n            titulo=data[\"titulo\"],\n            artista=data[\"artista\"],\n            album=data.get(\"album\"),\n            duracion=data.get(\"duracion\"),\n            a\u00f1o=data.get(\"a\u00f1o\"),\n            genero=data.get(\"genero\"),\n        )\n\n        try:\n            db.session.add(cancion)\n            db.session.commit()\n            return cancion, 201\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.CancionListAPI.get","title":"<code>get()</code>","text":"<p>Obtiene todas las canciones registradas (paginadas)</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Listar todas las canciones con paginaci\u00f3n\")\n@ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n@ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n@ns.response(200, \"Lista de canciones obtenida con \u00e9xito\")\n@ns.marshal_list_with(cancion_model)\ndef get(self):\n    \"\"\"Obtiene todas las canciones registradas (paginadas)\"\"\"\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"per_page\", 4))\n\n    canciones = Cancion.query.paginate(\n        page=page, per_page=per_page, error_out=False\n    )\n    return canciones.items, 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.CancionListAPI.post","title":"<code>post()</code>","text":"<p>Crea una nueva canci\u00f3n</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Crear una nueva canci\u00f3n\")\n@ns.expect(cancion_base)\n@ns.response(201, \"Canci\u00f3n creada con \u00e9xito\")\n@ns.marshal_with(cancion_model)\ndef post(self):\n    \"\"\"Crea una nueva canci\u00f3n\"\"\"\n    data = request.json\n\n    cancion = Cancion(\n        titulo=data[\"titulo\"],\n        artista=data[\"artista\"],\n        album=data.get(\"album\"),\n        duracion=data.get(\"duracion\"),\n        a\u00f1o=data.get(\"a\u00f1o\"),\n        genero=data.get(\"genero\"),\n    )\n\n    try:\n        db.session.add(cancion)\n        db.session.commit()\n        return cancion, 201\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al crear canci\u00f3n: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.FavoritoAPI","title":"<code>FavoritoAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/favoritos/&lt;int:id&gt;\")\n@ns.param(\"id\", \"Identificador \u00fanico del favorito\")\n@ns.response(404, \"Favorito no encontrado\")\nclass FavoritoAPI(Resource):\n    @ns.doc(\"Obtener un favorito por su ID\")\n    @ns.marshal_with(favorito_model)\n    def get(self, id):\n        \"\"\"Obtiene un registro de favorito por su ID\"\"\"\n        return Favorito.query.get_or_404(id), 200\n\n    @ns.doc(\"Eliminar un favorito\")\n    @ns.response(204, \"Favorito eliminado con \u00e9xito\")\n    def delete(self, id):\n        \"\"\"Elimina un registro de favorito existente\"\"\"\n        favorito = Favorito.query.get_or_404(id)\n        try:\n            db.session.delete(favorito)\n            db.session.commit()\n            return {}, 204\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.FavoritoAPI.delete","title":"<code>delete(id)</code>","text":"<p>Elimina un registro de favorito existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Eliminar un favorito\")\n@ns.response(204, \"Favorito eliminado con \u00e9xito\")\ndef delete(self, id):\n    \"\"\"Elimina un registro de favorito existente\"\"\"\n    favorito = Favorito.query.get_or_404(id)\n    try:\n        db.session.delete(favorito)\n        db.session.commit()\n        return {}, 204\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.FavoritoAPI.get","title":"<code>get(id)</code>","text":"<p>Obtiene un registro de favorito por su ID</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Obtener un favorito por su ID\")\n@ns.marshal_with(favorito_model)\ndef get(self, id):\n    \"\"\"Obtiene un registro de favorito por su ID\"\"\"\n    return Favorito.query.get_or_404(id), 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.Home","title":"<code>Home</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/\")\nclass Home(Resource):\n    @ns.doc(\"P\u00e1gina principal de la API\")\n    @ns.marshal_with(mensaje_model)\n    def get(self):\n        \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\"\n        return {\n            \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\"\n        }, 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.Home.get","title":"<code>get()</code>","text":"<p>Mensaje de bienvenida en la ra\u00edz de la API</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"P\u00e1gina principal de la API\")\n@ns.marshal_with(mensaje_model)\ndef get(self):\n    \"\"\"Mensaje de bienvenida en la ra\u00edz de la API\"\"\"\n    return {\n        \"mensaje\": \"Bienvenido a la API de M\u00fasica. Visita /docs para la documentaci\u00f3n.\"\n    }, 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.Ping","title":"<code>Ping</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/ping\")\nclass Ping(Resource):\n    @ns.response(200, \"API funcionando correctamente\")\n    @ns.marshal_with(mensaje_model)\n    def get(self):\n        \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\"\n        return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.Ping.get","title":"<code>get()</code>","text":"<p>Endpoint para verificar que la API est\u00e1 funcionando</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.response(200, \"API funcionando correctamente\")\n@ns.marshal_with(mensaje_model)\ndef get(self):\n    \"\"\"Endpoint para verificar que la API est\u00e1 funcionando\"\"\"\n    return {\"mensaje\": \"La API est\u00e1 funcionando correctamente\"}, 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioAPI","title":"<code>UsuarioAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/usuarios/&lt;int:id&gt;\")\n@ns.param(\"id\", \"Identificador \u00fanico del usuario\")\n@ns.response(404, \"Usuario no encontrado\")\nclass UsuarioAPI(Resource):\n    @ns.doc(\"Obtener un usuario por su ID\")\n    @ns.marshal_with(usuario_model)\n    def get(self, id):\n        \"\"\"Obtiene un usuario por su ID\"\"\"\n        return Usuario.query.get_or_404(id), 200\n\n    @ns.doc(\"Actualizar un usuario\")\n    @ns.expect(usuario_base)\n    @ns.marshal_with(usuario_model)\n    def put(self, id):\n        \"\"\"Actualiza un usuario existente\"\"\"\n        usuario = Usuario.query.get_or_404(id)\n        data = request.json\n\n        if \"correo\" in data and data[\"correo\"] != usuario.correo:\n            if Usuario.query.filter_by(correo=data[\"correo\"]).first():\n                ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\")\n\n        usuario.nombre = data.get(\"nombre\", usuario.nombre)\n        usuario.correo = data.get(\"correo\", usuario.correo)\n\n        try:\n            db.session.commit()\n            return usuario\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al actualizar usuario: {str(e)}\")\n\n    @ns.doc(\"Eliminar un usuario\")\n    @ns.response(204, \"Usuario eliminado con \u00e9xito\")\n    def delete(self, id):\n        \"\"\"Elimina un usuario existente\"\"\"\n        usuario = Usuario.query.get_or_404(id)\n        try:\n            db.session.delete(usuario)\n            db.session.commit()\n            return {}, 204\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al eliminar usuario: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioAPI.delete","title":"<code>delete(id)</code>","text":"<p>Elimina un usuario existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Eliminar un usuario\")\n@ns.response(204, \"Usuario eliminado con \u00e9xito\")\ndef delete(self, id):\n    \"\"\"Elimina un usuario existente\"\"\"\n    usuario = Usuario.query.get_or_404(id)\n    try:\n        db.session.delete(usuario)\n        db.session.commit()\n        return {}, 204\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al eliminar usuario: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioAPI.get","title":"<code>get(id)</code>","text":"<p>Obtiene un usuario por su ID</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Obtener un usuario por su ID\")\n@ns.marshal_with(usuario_model)\ndef get(self, id):\n    \"\"\"Obtiene un usuario por su ID\"\"\"\n    return Usuario.query.get_or_404(id), 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioAPI.put","title":"<code>put(id)</code>","text":"<p>Actualiza un usuario existente</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Actualizar un usuario\")\n@ns.expect(usuario_base)\n@ns.marshal_with(usuario_model)\ndef put(self, id):\n    \"\"\"Actualiza un usuario existente\"\"\"\n    usuario = Usuario.query.get_or_404(id)\n    data = request.json\n\n    if \"correo\" in data and data[\"correo\"] != usuario.correo:\n        if Usuario.query.filter_by(correo=data[\"correo\"]).first():\n            ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\")\n\n    usuario.nombre = data.get(\"nombre\", usuario.nombre)\n    usuario.correo = data.get(\"correo\", usuario.correo)\n\n    try:\n        db.session.commit()\n        return usuario\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al actualizar usuario: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioCancionFavoritoAPI","title":"<code>UsuarioCancionFavoritoAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/usuarios/&lt;int:id_usuario&gt;/favoritos/&lt;int:id_cancion&gt;\")\n@ns.param(\"id_usuario\", \"Identificador \u00fanico del usuario\")\n@ns.param(\"id_cancion\", \"Identificador \u00fanico de la canci\u00f3n\")\nclass UsuarioCancionFavoritoAPI(Resource):\n    @ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\")\n    @ns.response(201, \"Canci\u00f3n marcada como favorita\")\n    @ns.response(204, \"Canci\u00f3n desmarcada como favorita\")\n    @ns.response(404, \"Usuario o canci\u00f3n no encontrada\")\n    def post(self, id_usuario, id_cancion):\n        \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\"\n        usuario = Usuario.query.get(id_usuario)\n        cancion = Cancion.query.get(id_cancion)\n\n        if not usuario:\n            ns.abort(404, \"Usuario no encontrado\")\n        if not cancion:\n            ns.abort(404, \"Canci\u00f3n no encontrada\")\n\n        favorito = Favorito.query.filter_by(\n            id_usuario=id_usuario, id_cancion=id_cancion\n        ).first()\n\n        if favorito:\n            ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\")\n\n        favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion)\n\n        try:\n            db.session.add(favorito)\n            db.session.commit()\n            return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")\n\n    @ns.doc(\"Eliminar una canci\u00f3n de favoritos\")\n    @ns.response(204, \"Canci\u00f3n eliminada de favoritos\")\n    @ns.response(404, \"Relaci\u00f3n de favorito no encontrada\")\n    def delete(self, id_usuario, id_cancion):\n        \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\"\n        favorito = Favorito.query.filter_by(\n            id_usuario=id_usuario, id_cancion=id_cancion\n        ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\")\n\n        try:\n            db.session.delete(favorito)\n            db.session.commit()\n            return {}, 204\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioCancionFavoritoAPI.delete","title":"<code>delete(id_usuario, id_cancion)</code>","text":"<p>Elimina una canci\u00f3n de favoritos para un usuario</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Eliminar una canci\u00f3n de favoritos\")\n@ns.response(204, \"Canci\u00f3n eliminada de favoritos\")\n@ns.response(404, \"Relaci\u00f3n de favorito no encontrada\")\ndef delete(self, id_usuario, id_cancion):\n    \"\"\"Elimina una canci\u00f3n de favoritos para un usuario\"\"\"\n    favorito = Favorito.query.filter_by(\n        id_usuario=id_usuario, id_cancion=id_cancion\n    ).first_or_404(\"Relaci\u00f3n de favorito no encontrada\")\n\n    try:\n        db.session.delete(favorito)\n        db.session.commit()\n        return {}, 204\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al eliminar favorito: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioCancionFavoritoAPI.post","title":"<code>post(id_usuario, id_cancion)</code>","text":"<p>Marca una canci\u00f3n como favorita para un usuario</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Marcar o desmarcar una canci\u00f3n como favorita para un usuario\")\n@ns.response(201, \"Canci\u00f3n marcada como favorita\")\n@ns.response(204, \"Canci\u00f3n desmarcada como favorita\")\n@ns.response(404, \"Usuario o canci\u00f3n no encontrada\")\ndef post(self, id_usuario, id_cancion):\n    \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\"\n    usuario = Usuario.query.get(id_usuario)\n    cancion = Cancion.query.get(id_cancion)\n\n    if not usuario:\n        ns.abort(404, \"Usuario no encontrado\")\n    if not cancion:\n        ns.abort(404, \"Canci\u00f3n no encontrada\")\n\n    favorito = Favorito.query.filter_by(\n        id_usuario=id_usuario, id_cancion=id_cancion\n    ).first()\n\n    if favorito:\n        ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\")\n\n    favorito = Favorito(id_usuario=id_usuario, id_cancion=id_cancion)\n\n    try:\n        db.session.add(favorito)\n        db.session.commit()\n        return {\"mensaje\": \"Canci\u00f3n marcada como favorita\"}, 201\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioFavoritosAPI","title":"<code>UsuarioFavoritosAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/usuarios/&lt;int:id&gt;/favoritos\")\n@ns.param(\"id\", \"Identificador \u00fanico del usuario\")\n@ns.response(404, \"Usuario no encontrado\")\nclass UsuarioFavoritosAPI(Resource):\n    @ns.doc(\"Obtener las canciones favoritas de un usuario\")\n    @ns.marshal_with(favoritos_usuario_model)\n    def get(self, id):\n        \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\"\n        usuario = Usuario.query.get_or_404(id)\n\n        favoritos = Favorito.query.filter_by(id_usuario=id).all()\n        canciones_favoritas = [\n            {\n                \"id\": favorito.cancion.id,\n                \"titulo\": favorito.cancion.titulo,\n                \"artista\": favorito.cancion.artista,\n            }\n            for favorito in favoritos\n        ]\n\n        return {\n            \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre},\n            \"canciones_favoritas\": canciones_favoritas,\n        }, 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioFavoritosAPI.get","title":"<code>get(id)</code>","text":"<p>Obtiene todas las canciones favoritas de un usuario</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Obtener las canciones favoritas de un usuario\")\n@ns.marshal_with(favoritos_usuario_model)\ndef get(self, id):\n    \"\"\"Obtiene todas las canciones favoritas de un usuario\"\"\"\n    usuario = Usuario.query.get_or_404(id)\n\n    favoritos = Favorito.query.filter_by(id_usuario=id).all()\n    canciones_favoritas = [\n        {\n            \"id\": favorito.cancion.id,\n            \"titulo\": favorito.cancion.titulo,\n            \"artista\": favorito.cancion.artista,\n        }\n        for favorito in favoritos\n    ]\n\n    return {\n        \"usuario\": {\"id\": usuario.id, \"nombre\": usuario.nombre},\n        \"canciones_favoritas\": canciones_favoritas,\n    }, 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioListAPI","title":"<code>UsuarioListAPI</code>","text":"<p>               Bases: <code>Resource</code></p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.route(\"/usuarios\")\nclass UsuarioListAPI(Resource):\n    @ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\")\n    @ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n    @ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n    @ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\")\n    @ns.marshal_list_with(usuario_model)\n    def get(self):\n        \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\"\n        page = int(request.args.get(\"page\", 1))\n        per_page = int(request.args.get(\"per_page\", 4))\n        usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False)\n        return usuarios.items, 200\n\n    @ns.doc(\"Marcar una canci\u00f3n como favorita\")\n    @ns.expect(favorito_input)\n    @ns.response(201, \"Canci\u00f3n marcada como favorita\")\n    @ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\")\n    @ns.response(404, \"Usuario o canci\u00f3n no encontrada\")\n    @ns.marshal_with(favorito_model)\n    def post(self):\n        \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\"\n        data = request.json\n\n        usuario = Usuario.query.get(data[\"id_usuario\"])\n        cancion = Cancion.query.get(data[\"id_cancion\"])\n\n        if not usuario:\n            ns.abort(404, \"Usuario no encontrado\")\n        if not cancion:\n            ns.abort(404, \"Canci\u00f3n no encontrada\")\n\n        favorito_existente = Favorito.query.filter_by(\n            id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"]\n        ).first()\n\n        if favorito_existente:\n            ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\")\n\n        favorito = Favorito(\n            id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"]\n        )\n\n        try:\n            db.session.add(favorito)\n            db.session.commit()\n            return favorito, 201\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioListAPI.get","title":"<code>get()</code>","text":"<p>Obtiene todos los usuarios registrados (paginados)</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\")\n@ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n@ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n@ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\")\n@ns.marshal_list_with(usuario_model)\ndef get(self):\n    \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\"\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"per_page\", 4))\n    usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False)\n    return usuarios.items, 200\n</code></pre>"},{"location":"resources.html#musica_api.resources.UsuarioListAPI.post","title":"<code>post()</code>","text":"<p>Marca una canci\u00f3n como favorita para un usuario</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Marcar una canci\u00f3n como favorita\")\n@ns.expect(favorito_input)\n@ns.response(201, \"Canci\u00f3n marcada como favorita\")\n@ns.response(400, \"Datos inv\u00e1lidos o relaci\u00f3n ya existe\")\n@ns.response(404, \"Usuario o canci\u00f3n no encontrada\")\n@ns.marshal_with(favorito_model)\ndef post(self):\n    \"\"\"Marca una canci\u00f3n como favorita para un usuario\"\"\"\n    data = request.json\n\n    usuario = Usuario.query.get(data[\"id_usuario\"])\n    cancion = Cancion.query.get(data[\"id_cancion\"])\n\n    if not usuario:\n        ns.abort(404, \"Usuario no encontrado\")\n    if not cancion:\n        ns.abort(404, \"Canci\u00f3n no encontrada\")\n\n    favorito_existente = Favorito.query.filter_by(\n        id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"]\n    ).first()\n\n    if favorito_existente:\n        ns.abort(400, \"La canci\u00f3n ya est\u00e1 marcada como favorita para este usuario\")\n\n    favorito = Favorito(\n        id_usuario=data[\"id_usuario\"], id_cancion=data[\"id_cancion\"]\n    )\n\n    try:\n        db.session.add(favorito)\n        db.session.commit()\n        return favorito, 201\n    except Exception as e:\n        db.session.rollback()\n        ns.abort(400, f\"Error al marcar como favorito: {str(e)}\")\n</code></pre>"},{"location":"resources.html#musica_api.resources.get","title":"<code>get(self)</code>","text":"<p>Obtiene todos los usuarios registrados (paginados)</p> Source code in <code>musica_api\\resources.py</code> <pre><code>@ns.doc(\"Listar todos los usuarios con paginaci\u00f3n\")\n@ns.param(\"page\", \"N\u00famero de p\u00e1gina (por defecto 1)\")\n@ns.param(\"per_page\", \"Cantidad por p\u00e1gina (por defecto 4)\")\n@ns.response(200, \"Lista de usuarios obtenida con \u00e9xito\")\n@ns.marshal_list_with(usuario_model)\ndef get(self):\n    \"\"\"Obtiene todos los usuarios registrados (paginados)\"\"\"\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"per_page\", 4))\n\n    usuarios = Usuario.query.paginate(page=page, per_page=per_page, error_out=False)\n    return usuarios.items, 200\n\n    @ns.doc(\"Crear un nuevo usuario\")\n    @ns.expect(usuario_base)\n    @ns.response(201, \"Usuario creado con \u00e9xito\")\n    @ns.response(400, \"Datos inv\u00e1lidos o correo ya existe\")\n    @ns.marshal_with(usuario_model)\n    def post(self):\n        \"\"\"Crea un nuevo usuario\"\"\"\n        data = request.json\n\n        if Usuario.query.filter_by(correo=data[\"correo\"]).first():\n            ns.abort(400, \"El correo electr\u00f3nico ya est\u00e1 registrado\")\n\n        usuario = Usuario(nombre=data[\"nombre\"], correo=data[\"correo\"])\n\n        try:\n            db.session.add(usuario)\n            db.session.commit()\n            return usuario, 201\n        except Exception as e:\n            db.session.rollback()\n            ns.abort(400, f\"Error al crear usuario: {str(e)}\")\n</code></pre>"},{"location":"utils.html","title":"M\u00f3dulo de utilidades para la aplicaci\u00f3n.","text":"<p>M\u00f3dulo de utilidades para la aplicaci\u00f3n. Contiene funciones auxiliares utilizadas en diferentes partes de la aplicaci\u00f3n.</p>"},{"location":"utils.html#utils.formatear_duracion","title":"<code>formatear_duracion(segundos)</code>","text":"<p>Convierte una duraci\u00f3n en segundos a formato mm:ss.</p> <p>Parameters:</p> Name Type Description Default <code>segundos</code> <code>int</code> <p>Duraci\u00f3n en segundos</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>Duraci\u00f3n formateada como mm:ss</p> Source code in <code>utils.py</code> <pre><code>def formatear_duracion(segundos):\n    \"\"\"\n    Convierte una duraci\u00f3n en segundos a formato mm:ss.\n\n    Args:\n        segundos (int): Duraci\u00f3n en segundos\n\n    Returns:\n        str: Duraci\u00f3n formateada como mm:ss\n    \"\"\"\n    minutos = segundos // 60\n    segundos_restantes = segundos % 60\n    return f\"{minutos:02}:{segundos_restantes:02}\"\n</code></pre>"},{"location":"utils.html#utils.generar_slug","title":"<code>generar_slug(texto)</code>","text":"<p>Genera un slug a partir de un texto. Un slug es una versi\u00f3n de texto amigable para URLs.</p> <p>Parameters:</p> Name Type Description Default <code>texto</code> <code>str</code> <p>Texto a convertir en slug</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>Slug generado</p> Source code in <code>utils.py</code> <pre><code>def generar_slug(texto):\n    \"\"\"\n    Genera un slug a partir de un texto.\n    Un slug es una versi\u00f3n de texto amigable para URLs.\n\n    Args:\n        texto (str): Texto a convertir en slug\n\n    Returns:\n        str: Slug generado\n    \"\"\"\n    slug = texto.lower()  # Convertir a min\u00fasculas\n    slug = re.sub(r\"\\s+\", \"-\", slug)  # Reemplazar espacios con guiones\n    slug = re.sub(r\"[^a-z0-9\\-]\", \"\", slug)  # Eliminar caracteres no alfanum\u00e9ricos\n    slug = re.sub(r\"-{2,}\", \"-\", slug)  # Reemplazar m\u00faltiples guiones con uno solo\n    slug = slug.strip(\"-\")  # Eliminar guiones al inicio y final\n    return slug\n</code></pre>"},{"location":"utils.html#utils.obtener_a\u00f1o_actual","title":"<code>obtener_a\u00f1o_actual()</code>","text":"<p>Obtiene el a\u00f1o actual.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>A\u00f1o actual</p> Source code in <code>utils.py</code> <pre><code>def obtener_a\u00f1o_actual():\n    \"\"\"\n    Obtiene el a\u00f1o actual.\n\n    Returns:\n        int: A\u00f1o actual\n    \"\"\"\n    return datetime.now().year\n</code></pre>"},{"location":"utils.html#utils.validar_a\u00f1o","title":"<code>validar_a\u00f1o(a\u00f1o)</code>","text":"<p>Valida que un a\u00f1o sea v\u00e1lido (no futuro y no muy antiguo).</p> <p>Parameters:</p> Name Type Description Default <code>a\u00f1o</code> <code>int</code> <p>A\u00f1o a validar</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True si el a\u00f1o es v\u00e1lido, False en caso contrario</p> Source code in <code>utils.py</code> <pre><code>def validar_a\u00f1o(a\u00f1o):\n    \"\"\"\n    Valida que un a\u00f1o sea v\u00e1lido (no futuro y no muy antiguo).\n\n    Args:\n        a\u00f1o (int): A\u00f1o a validar\n\n    Returns:\n        bool: True si el a\u00f1o es v\u00e1lido, False en caso contrario\n    \"\"\"\n    a\u00f1o_actual = obtener_a\u00f1o_actual()\n    return isinstance(a\u00f1o, int) and 1900 &lt;= a\u00f1o &lt;= a\u00f1o_actual\n</code></pre>"},{"location":"utils.html#utils.validar_correo","title":"<code>validar_correo(correo)</code>","text":"<p>Valida que un correo electr\u00f3nico tenga un formato v\u00e1lido.</p> <p>Parameters:</p> Name Type Description Default <code>correo</code> <code>str</code> <p>Correo electr\u00f3nico a validar</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True si el correo es v\u00e1lido, False en caso contrario</p> Source code in <code>utils.py</code> <pre><code>def validar_correo(correo):\n    \"\"\"\n    Valida que un correo electr\u00f3nico tenga un formato v\u00e1lido.\n\n    Args:\n        correo (str): Correo electr\u00f3nico a validar\n\n    Returns:\n        bool: True si el correo es v\u00e1lido, False en caso contrario\n    \"\"\"\n    # Expresi\u00f3n regular para validar correos electr\u00f3nicos\n    patron = r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\"\n    return bool(re.match(patron, correo))\n</code></pre>"}]}